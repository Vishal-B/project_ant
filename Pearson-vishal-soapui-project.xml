<?xml version="1.0" encoding="UTF-8"?>
<con:soapui-project id="d9c0ef42-812c-4c87-92b1-cd0e68a78ebe" activeEnvironment="Default" name="ESES_qa_jenkin_working" resourceRoot="" soapui-version="5.3.0" abortOnError="false" runType="SEQUENTIAL" xmlns:con="http://eviware.com/soapui/config">
  <con:settings/>
  <con:interface xsi:type="con:RestService" id="d575a2c9-c00a-4b85-89be-ecb35f9476c6" wadlVersion="http://wadl.dev.java.net/2009/02" name="http://172.16.36.46:8080" type="rest" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
    <con:settings/>
    <con:definitionCache type="TEXT" rootPart=""/>
    <con:endpoints>
      <con:endpoint>${#Project#PNSURL}</con:endpoint>
    </con:endpoints>
    <con:resource name="CreateTemplate" path="/${#Project#TemplateEnd}" id="68aa021e-3067-4eb9-a31b-4abb2393df63">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>x-Authorization</con:name>
          <con:value/>
          <con:style>HEADER</con:style>
          <con:default/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
      <con:method name="CreateTemplate" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>400 409</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>text/html; charset=utf-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json</con:mediaType>
          <con:status>500</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#QURL}</con:endpoint>
          <con:request>{
 "productType": "VB29",
 "appType": "22discussions22",
 "eventType": "22discussions.topiccreated22",
 "channelType": "inbrowser",
 "template": {
   "locale": "EN-",
   "contactName": "22dionysus@pearson.com",
   "payload": { "message": "data delivered to inbrowser" }
 }
}</con:request>
          <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder>
            <con:entry>x-Authorization</con:entry>
          </con:parameterOrder>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="NotificationTurnOn" path="/${#Project#notificationTurnOnEnd}" id="5c2ce102-e7e5-4d0c-9d51-186d67b2bd7f">
      <con:settings/>
      <con:parameters/>
      <con:method name="TurnOn" id="5e3e0a64-7dcf-4633-a9ed-6d074696bae7" method="PUT">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>text/plain; charset=utf-8</con:mediaType>
          <con:status>500</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:request name="Request 1" id="9dc8013f-d8a2-4c09-8195-fd50e4010ee6" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#QURL}</con:endpoint>
          <con:request/>
          <con:originalUri>http://172.16.36.46//event/publish</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="GenerateToken" path="/${#Project#generateTokenEnd}" id="68aa021e-3067-4eb9-a31b-4abb2393df63">
      <con:settings/>
      <con:parameters/>
      <con:method name="GenerateToken" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200 201</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>400</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#PNSURL}</con:endpoint>
          <con:request>{ "userName":"globallogic_system", "password":"fHdM0m9zPFIceKZ1GPhy7Qqq1mg0sJ69"}</con:request>
          <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="GetTemplate" path="/${#Project#TemplateEnd}/{TokenId}" id="68aa021e-3067-4eb9-a31b-4abb2393df63">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>TokenId</con:name>
          <con:value/>
          <con:style>TEMPLATE</con:style>
          <con:default/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
      <con:method name="GetTemplate" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="GET">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>400</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json</con:mediaType>
          <con:status>405 500</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#QURL}</con:endpoint>
          <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
          <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters>
            <entry key="TokenId" value="as" xmlns="http://eviware.com/soapui/config"/>
          </con:parameters>
          <con:parameterOrder>
            <con:entry>TokenId</con:entry>
          </con:parameterOrder>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="UpdateTemplate" path="/${#Project#TemplateEnd}/{TokenId}" id="68aa021e-3067-4eb9-a31b-4abb2393df63">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>TokenId</con:name>
          <con:value/>
          <con:style>TEMPLATE</con:style>
          <con:default/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
      <con:method name="UpdateTemplate" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="PUT">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>400</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json</con:mediaType>
          <con:status>500</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#QURL}</con:endpoint>
          <con:request>{
 "productType": "VB29",
 "appType": "22discussions22",
 "eventType": "22discussions.topiccreated22",
 "channelType": "inbrowser",
 "template": {
   "locale": "EN-",
   "contactName": "22dionysus@pearson.com",
   "payload": { "message": "data delivered to inbrowser" }
 }
}</con:request>
          <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder>
            <con:entry>TokenId</con:entry>
          </con:parameterOrder>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="DeleteTemplate" path="/${#Project#TemplateEnd}/{TokenId}" id="68aa021e-3067-4eb9-a31b-4abb2393df63">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>TokenId</con:name>
          <con:value/>
          <con:style>TEMPLATE</con:style>
          <con:default/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
      <con:method name="DeleteTemplate" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="DELETE">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>400</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>text/html; charset=utf-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json</con:mediaType>
          <con:status>405</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#QURL}</con:endpoint>
          <con:request/>
          <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder>
            <con:entry>TokenId</con:entry>
          </con:parameterOrder>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="IAMUserLogin" path="/${#Project#UserLoginEnd}" id="68aa021e-3067-4eb9-a31b-4abb2393df63">
      <con:settings/>
      <con:parameters/>
      <con:method name="UserLogIn" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>400 500</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>text/html; charset=utf-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json</con:mediaType>
          <con:status>500 401</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X-OpenAM-Username" value="test12345"/>
  &lt;con:entry key="X-OpenAM-Password" value="secret12"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>${#Project#QURL}</con:endpoint>
          <con:request>{
"userName":"vishalBhopal22",
"password":"vishalBhopal22"
}</con:request>
          <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="IAMUserLogout" path="/${#Project#TemplateEnd}" id="68aa021e-3067-4eb9-a31b-4abb2393df63">
      <con:settings/>
      <con:parameters/>
      <con:method name="UserLogIn" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>400</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#QURL}</con:endpoint>
          <con:request>{
 "productType": "VB29",
 "appType": "22discussions22",
 "eventType": "22discussions.topiccreated22",
 "channelType": "inbrowser",
 "template": {
   "locale": "EN-",
   "contactName": "22dionysus@pearson.com",
   "payload": { "message": "data delivered to inbrowser" }
 }
}</con:request>
          <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="TokenValidation" path="/${#Project#TemplateEnd}" id="68aa021e-3067-4eb9-a31b-4abb2393df63">
      <con:settings/>
      <con:parameters/>
      <con:method name="UserLogIn" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>400</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#QURL}</con:endpoint>
          <con:request>{
 "productType": "VB29",
 "appType": "22discussions22",
 "eventType": "22discussions.topiccreated22",
 "channelType": "inbrowser",
 "template": {
   "locale": "EN-",
   "contactName": "22dionysus@pearson.com",
   "payload": { "message": "data delivered to inbrowser" }
 }
}</con:request>
          <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="GenerateClaimToken" path="/${#Project#ClaimTokenEnd}" id="68aa021e-3067-4eb9-a31b-4abb2393df63">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>x-Authorization</con:name>
          <con:value/>
          <con:style>HEADER</con:style>
          <con:default/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
      <con:method name="Generate Claim Token" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>400 409</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>text/html; charset=utf-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#QURL}</con:endpoint>
          <con:request/>
          <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder>
            <con:entry>x-Authorization</con:entry>
          </con:parameterOrder>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="RetrieveClaimToken" path="/${#Project#TemplateEnd}/{TokenId}" id="68aa021e-3067-4eb9-a31b-4abb2393df63">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>TokenId</con:name>
          <con:value/>
          <con:style>TEMPLATE</con:style>
          <con:default/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
      <con:method name="Retrieve Claim Token" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="GET">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>400</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json</con:mediaType>
          <con:status>405</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#QURL}</con:endpoint>
          <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
          <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters>
            <entry key="TokenId" value="as" xmlns="http://eviware.com/soapui/config"/>
          </con:parameters>
          <con:parameterOrder>
            <con:entry>TokenId</con:entry>
          </con:parameterOrder>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="GetTemplatebyaltId" path="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" id="68aa021e-3067-4eb9-a31b-4abb2393df63">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>productType</con:name>
          <con:value/>
          <con:style>TEMPLATE</con:style>
          <con:default/>
          <con:description xsi:nil="true"/>
        </con:parameter>
        <con:parameter>
          <con:name>appType</con:name>
          <con:value/>
          <con:style>TEMPLATE</con:style>
          <con:default/>
          <con:description xsi:nil="true"/>
        </con:parameter>
        <con:parameter>
          <con:name>eventType</con:name>
          <con:value/>
          <con:style>TEMPLATE</con:style>
          <con:default/>
          <con:description xsi:nil="true"/>
        </con:parameter>
        <con:parameter>
          <con:name>channel</con:name>
          <con:value/>
          <con:style>TEMPLATE</con:style>
          <con:default/>
          <con:description xsi:nil="true"/>
        </con:parameter>
        <con:parameter>
          <con:name>locale</con:name>
          <con:value/>
          <con:style>TEMPLATE</con:style>
          <con:default/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
      <con:method name="GetTemplate" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="GET">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>400</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json</con:mediaType>
          <con:status>405 500</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#QURL}</con:endpoint>
          <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
          <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters>
            <con:entry key="locale" value="wre"/>
            <con:entry key="eventType" value="truy"/>
            <con:entry key="channel" value="erwwer"/>
            <con:entry key="appType" value="rew"/>
            <con:entry key="productType" value="rtt"/>
          </con:parameters>
          <con:parameterOrder>
            <con:entry>productType</con:entry>
            <con:entry>appType</con:entry>
            <con:entry>eventType</con:entry>
            <con:entry>channel</con:entry>
            <con:entry>locale</con:entry>
          </con:parameterOrder>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="UpdateTemplate" path="/${#Project#TemplateEnd}" id="68aa021e-3067-4eb9-a31b-4abb2393df63">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>x-Authorization</con:name>
          <con:value/>
          <con:style>HEADER</con:style>
          <con:default/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
      <con:method name="UpdateTemplate" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>400 409</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>text/html; charset=utf-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#QURL}</con:endpoint>
          <con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request>
          <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder>
            <con:entry>x-Authorization</con:entry>
          </con:parameterOrder>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="IAMLogin" path="/${#Project#UserLoginEnd}" id="68aa021e-3067-4eb9-a31b-4abb2393df63">
      <con:settings/>
      <con:parameters/>
      <con:method name="User_login" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>400 409</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>text/html; charset=utf-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json</con:mediaType>
          <con:status>401 500</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment xmlns:con="http://eviware.com/soapui/config">
  &lt;con:entry key="X-OpenAM-Username" value="vishal123"/>
  &lt;con:entry key="X-OpenAM-Password" value="Change!1"/>
  &lt;con:entry key="Content-Type" value="application/json"/>
&lt;/xml-fragment></con:setting>
          </con:settings>
          <con:endpoint>${#Project#QURL}</con:endpoint>
          <con:request/>
          <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="IAMUserLoginTokenValidation" path="/${#Project#UserTokenValidationEnd}" id="68aa021e-3067-4eb9-a31b-4abb2393df63">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>TokenId</con:name>
          <con:value/>
          <con:style>HEADER</con:style>
          <con:default/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
      <con:method name="User_Token_Validation" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>400 409</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>text/html; charset=utf-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json</con:mediaType>
          <con:status>401 500 400</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#QURL}</con:endpoint>
          <con:request/>
          <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder>
            <con:entry>TokenId</con:entry>
          </con:parameterOrder>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="IAMLogout" path="/${#Project#UserLogoutEnd}" id="68aa021e-3067-4eb9-a31b-4abb2393df63">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>PearsonExtSSOSession</con:name>
          <con:value/>
          <con:style>HEADER</con:style>
          <con:default/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
      <con:method name="User_logout" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>400 409</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>text/html; charset=utf-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json</con:mediaType>
          <con:status>401 400</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="PearsonExtSSOSession" value="" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#QURL}</con:endpoint>
          <con:request/>
          <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters>
            <entry key="PearsonExtSSOSession" value="AQIC5wM2LY4SfcyLKgo9frT6044i2Bc8B7M5p8mU1VWi7Jo.*AAJTSQACMDIAAlNLABQtMTkyNjA5MzgzMzM3MjgzNDkwNwACUzEAAjEx*" xmlns="http://eviware.com/soapui/config"/>
          </con:parameters>
          <con:parameterOrder>
            <con:entry>PearsonExtSSOSession</con:entry>
          </con:parameterOrder>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="GenerateIAMUserClaimToken" path="/${#Project#ClaimTokenEnd}" id="68aa021e-3067-4eb9-a31b-4abb2393df63">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>TokenId</con:name>
          <con:value/>
          <con:style>HEADER</con:style>
          <con:default/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
      <con:method name="GenerateClaimToken" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>400 409</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>text/html; charset=utf-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json</con:mediaType>
          <con:status>401 500 400</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="PearsonExtSSOSession" value="AQIC5wM2LY4SfcwHte3rbDMxHH-fWPSUlUipJSgrOqdRXZY.*AAJTSQACMDIAAlNLABQtMzA4MzU5NjAyMzE1ODc3ODE1NgACUzEAAjE3*" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#QURL}</con:endpoint>
          <con:request/>
          <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder>
            <con:entry>TokenId</con:entry>
          </con:parameterOrder>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="RetriveIAMUserClaimToken" path="/${#Project#ClaimTokenEnd}" id="68aa021e-3067-4eb9-a31b-4abb2393df63">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>jwtClaimToken</con:name>
          <con:value/>
          <con:style>HEADER</con:style>
          <con:default/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
      <con:method name="RetrieveClaimToken" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="GET">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>400</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json</con:mediaType>
          <con:status>405 500 400</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#QURL}</con:endpoint>
          <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
          <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder>
            <con:entry>jwtClaimToken</con:entry>
          </con:parameterOrder>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="IAMAuth2.0Login" path="/${#Project#UserLoginAuth2.0End}" id="68aa021e-3067-4eb9-a31b-4abb2393df63">
      <con:settings/>
      <con:parameters/>
      <con:method name="User_Auth_login" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>400 409</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>text/html; charset=utf-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json</con:mediaType>
          <con:status>401</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType xsi:nil="true"/>
          <con:status>0</con:status>
          <con:params/>
          <con:element>data</con:element>
        </con:representation>
        <con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#QURL}</con:endpoint>
          <con:request>{
"userName":"demo.test@globallogic.com",
"password":"Password!1"

}</con:request>
          <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder/>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="IAMUserAuthLoginTokenValidation" path="/${#Project#UserTokenValidationAuth2.0End}/{AccessTokenId}" id="68aa021e-3067-4eb9-a31b-4abb2393df63">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>AccessTokenId</con:name>
          <con:value/>
          <con:style>TEMPLATE</con:style>
          <con:default/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
      <con:method name="User_Auth_Token_Validation" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>400 409</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>text/html; charset=utf-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json</con:mediaType>
          <con:status>401 500 400 404</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#QURL}</con:endpoint>
          <con:request/>
          <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters>
            <entry key="AccessTokenId" value="0887ef47-f558-423a-86ff-fd3b2f356d4a" xmlns="http://eviware.com/soapui/config"/>
          </con:parameters>
          <con:parameterOrder>
            <con:entry>AccessTokenId</con:entry>
          </con:parameterOrder>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="IAMAuth2.0Logout" path="/${#Project#UserLogoutAuth2.0End}" id="68aa021e-3067-4eb9-a31b-4abb2393df63">
      <con:settings/>
      <con:parameters>
        <con:parameter>
          <con:name>oauthToken</con:name>
          <con:value/>
          <con:style>HEADER</con:style>
          <con:default/>
          <con:description xsi:nil="true"/>
        </con:parameter>
      </con:parameters>
      <con:method name="User_Auth_logout" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>400 409</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>text/html; charset=utf-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json</con:mediaType>
          <con:status>401</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#QURL}</con:endpoint>
          <con:request/>
          <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters>
            <entry key="oauthToken" value="5797cb01-5be0-403c-88a2-84959bdf55db" xmlns="http://eviware.com/soapui/config"/>
          </con:parameters>
          <con:parameterOrder>
            <con:entry>oauthToken</con:entry>
          </con:parameterOrder>
        </con:request>
      </con:method>
    </con:resource>
    <con:resource name="IAMUserAuthLoginClaimTokenValidation" path="/${#Project#UserAuth2.0ClaimTokenEnd}" id="68aa021e-3067-4eb9-a31b-4abb2393df63">
      <con:settings/>
      <con:parameters/>
      <con:method name="User_Auth_ClaimToken_Validation" id="d479529b-6c17-4db4-8201-d000f5a0cfb2" method="POST">
        <con:settings/>
        <con:parameters/>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="REQUEST">
          <con:mediaType>application/json</con:mediaType>
          <con:params/>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json;charset=UTF-8</con:mediaType>
          <con:status>400 409</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>text/html; charset=utf-8</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
        </con:representation>
        <con:representation type="RESPONSE">
          <con:mediaType>application/json</con:mediaType>
          <con:status>200</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Response</con:element>
        </con:representation>
        <con:representation type="FAULT">
          <con:mediaType>application/json</con:mediaType>
          <con:status>401 500 400 404</con:status>
          <con:params/>
          <con:element xmlns:reg="http://172.16.36.46/event/register">reg:Fault</con:element>
        </con:representation>
        <con:request name="Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
          <con:settings>
            <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
          </con:settings>
          <con:endpoint>${#Project#QURL}</con:endpoint>
          <con:request>{
"access_token":"34253"
}</con:request>
          <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
          <con:credentials>
            <con:authType>No Authorization</con:authType>
          </con:credentials>
          <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
          <con:jmsPropertyConfig/>
          <con:parameters/>
          <con:parameterOrder/>
        </con:request>
      </con:method>
    </con:resource>
  </con:interface>
  <con:testSuite id="4328cb53-1139-4bb6-84a2-f64bb96a69d6" name="Configuration">
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="e693c160-fe40-45a7-a22a-f3d3a0da8192" failOnError="true" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="Configurations" searchProperties="true">
      <con:settings/>
      <con:testStep type="groovy" name="Config" id="3651f01d-d9ba-4683-8841-2413d4620697">
        <con:settings/>
        <con:config>
          <script>import utilities.*;

log.info "Configuring properties..."
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def projectDir = groovyUtils.projectPath
def myTestCase = context.testCase
log.info projectDir

Properties properties = new Properties()
File propertiesFile = new File(projectDir + '\\config.properties')
propertiesFile.withInputStream {def project = context.testCase.testSuite.project
    properties.load(it)
}
def project = context.testCase.testSuite.project
project.setPropertyValue("QURL",properties.QURL)
project.setPropertyValue("PNSURL",properties.PNSURL)
project.setPropertyValue("notificationTurnOnEnd",properties.notificationTurnOnEnd)
project.setPropertyValue("NS_Workbook_Path",properties.NS_Workbook_Path)
project.setPropertyValue("NS_Template_Sheet",properties.NS_Template_Sheet)
project.setPropertyValue("generateTokenEnd",properties.generateTokenEnd)
project.setPropertyValue("TemplateEnd",properties.TemplateEnd)
project.setPropertyValue("GetTemplate_altid_End",properties.GetTemplate_altid_End)
project.setPropertyValue("NS_Templates_email_Sheet",properties.NS_Templates_email_Sheet)
project.setPropertyValue("SessionTimeout_Sheet",properties.SessionTimeout_Sheet)
project.setPropertyValue("UserLoginEnd",properties.UserLoginEnd)
project.setPropertyValue("UserTokenValidationEnd",properties.UserTokenValidationEnd)
project.setPropertyValue("UserLogout",properties.UserLogout)

project.setPropertyValue("UserLoginAuth2.0End",properties.UserLoginAuthEnd)
project.setPropertyValue("UserTokenValidationAuth2.0End",properties.UserTokenValidationAuthEnd)
project.setPropertyValue("UserLogoutAuth2.0End",properties.UserLogoutAuthEnd)
project.setPropertyValue("UserAuth2.0ClaimTokenEnd",properties.UserAuthClaimTokenEnd)




log.info "Properties added successfully..."
//======================================================</script>
        </con:config>
      </con:testStep>
      <con:properties/>
    </con:testCase>
    <con:properties/>
  </con:testSuite>
  <con:testSuite id="b187605f-ce8e-4aeb-97de-69a3f59b3743" name="NotificationSystem_Template_inbrowser_2">
    <con:description>TestSuite generated for REST Service [http://172.16.36.46:8080]</con:description>
    <con:settings/>
    <con:runType>SEQUENTIAL</con:runType>
    <con:testCase id="b21e4233-e52b-4405-b6d3-f99747fe181b" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_all_valid" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="ReadExcel" id="e01a8d3f-7a72-4454-b9ad-da8cc8d594ff">
        <con:settings/>
        <con:config>
          <script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties" id="23167e18-1237-425f-90a0-950fe84d109a">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>productType</con:name>
              <con:value>Template_regress77745560000000000</con:value>
            </con:property>
            <con:property>
              <con:name>appType</con:name>
              <con:value>appType</con:value>
            </con:property>
            <con:property>
              <con:name>eventType</con:name>
              <con:value>eventType</con:value>
            </con:property>
            <con:property>
              <con:name>channelType</con:name>
              <con:value>inbrowser</con:value>
            </con:property>
            <con:property>
              <con:name>locale</con:name>
              <con:value>EN-US</con:value>
            </con:property>
            <con:property>
              <con:name>contactName</con:name>
              <con:value>22dionysus@pearson.com</con:value>
            </con:property>
            <con:property>
              <con:name>message</con:name>
              <con:value>EN-US message</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>Success</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>ID</con:name>
              <con:value>TC_valid_all</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="8f0862a3-bd4e-4596-b1a8-7dc56611b0d2">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains">
              <con:configuration>
                <token>201</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiNTg0M2U0MWExYzdlNDU0Mzk2MzMyNWRiNDI2YjY5NDAiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.hZBWClJ4qUGfv-5b2AjTW7X6uRsRsxuz_cAzMTpMml6KjvUv5_-RTs_R2MXCFxoEdmr6t4oPJoyVijbOgTta2AGfC5VVKMJket6RbwLATrSG9l9Bg9BsGcqPn-w07hmfSjLul4ci9Tc1zXgrEGW9fDqMQuHdk4eU0WpqaYTASsc" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>x-Authorization</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TemplateIdTransfer" id="f4e9ab21-1bbb-4fb6-af35-f3246f7c71f4" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>GetTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="GetTemplate - Request 1" id="14faa2c2-f731-4717-9cd6-8e43ed01ab52" disabled="true">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains">
              <con:configuration>
                <token>200</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="42b0c279-2939-4054-964b-1fa7c1974c4f" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="productTypeTransfer" id="bb8e3e1b-c7cd-4a46-be8f-8eacb48d4691" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.productType</con:sourcePath>
            <con:targetType>productType</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="appTypeTransfer" id="68e4a6ee-6379-40ea-9c1e-afc9d1388533" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.appType</con:sourcePath>
            <con:targetType>appType</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="ChannelTransfer" id="61edea47-af05-4256-b141-ee7bba96b7b2" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.channelType</con:sourcePath>
            <con:targetType>channel</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="EventTransfer" id="dce189ba-b683-4e42-8289-8c64cccc82bb" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.eventType</con:sourcePath>
            <con:targetType>eventType</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="localeTransfer" id="fe922dad-eb0b-4f4d-b969-584171ae3f40" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.template.locale</con:sourcePath>
            <con:targetType>locale</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="GetTemplate_altid" id="1a794037-7e02-4768-ba3b-3ff257539b64" disabled="true">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains">
              <con:configuration>
                <token>200</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="locale" value="EN-US"/>
              <con:entry key="eventType" value="eventType"/>
              <con:entry key="appType" value="appType"/>
              <con:entry key="channel" value="inbrowser"/>
              <con:entry key="productType" value="Template_24"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>productType</con:entry>
              <con:entry>appType</con:entry>
              <con:entry>eventType</con:entry>
              <con:entry>channel</con:entry>
              <con:entry>locale</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TemplateIdTransfer 1" id="f775e6dc-14af-44b9-a844-5f410dc1abd7">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>DeleteTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="dc05a595-7e63-4a9d-97a8-8dd0de748d21">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request/>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion">
              <con:configuration>
                <token>204</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="62c1f15e-b1c5-4748-941f-f4708595a327" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Loop" id="66736583-17cb-452a-96ee-964af5739f9f" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="55354202-5b41-4db2-8cb4-163a1a601ad9" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_null_productType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="ReadExcel" id="4d9f7b98-d5c2-46f6-9bc3-62f9f15c4d20">
        <con:settings/>
        <con:config>
          <script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties" id="45031767-5190-45be-ac2a-4ae00eb3c58a">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>productType</con:name>
              <con:value>Template_regress77745560000000000</con:value>
            </con:property>
            <con:property>
              <con:name>appType</con:name>
              <con:value>appType</con:value>
            </con:property>
            <con:property>
              <con:name>eventType</con:name>
              <con:value>eventType</con:value>
            </con:property>
            <con:property>
              <con:name>channelType</con:name>
              <con:value>inbrowser</con:value>
            </con:property>
            <con:property>
              <con:name>locale</con:name>
              <con:value>EN-US</con:value>
            </con:property>
            <con:property>
              <con:name>contactName</con:name>
              <con:value>22dionysus@pearson.com</con:value>
            </con:property>
            <con:property>
              <con:name>message</con:name>
              <con:value>EN-US message</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>Success</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>ID</con:name>
              <con:value>TC_valid_all</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="c74fa146-f419-4d8f-8c80-b329e24210b9">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": " ",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="status">
              <con:configuration>
                <token>400</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="3b36043d-6528-48e6-914c-d8ba477d9f62" name="message">
              <con:configuration>
                <token>productType is required</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiOTg2ZTFkMTM3ZDAxNGQ0NWJhMzhmYWFlZTkwNmRjYmMiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.d-kiHwRuvD6UaDiCJw_thfudUFwASeFv3LkMHKA5yOirkCBNtS_kod4u6gPuay4SZXUKq6VTdA8-cAflXRPwxMTDNDoit_4Ykz1dvwisuQpuwsC6Eg2KSTcXuTtmghvzHIXX_VY3_g8NA6QLoSQI2wYdgVJqlmwAzfeugYFx1rQ" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>x-Authorization</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="94b0a8d8-3796-44c6-8225-06861bc20e30" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_null_eventType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="ReadExcel" id="028960ea-b2dc-4321-b791-a9ce00ec3b6b">
        <con:settings/>
        <con:config>
          <script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties" id="d371bd7e-6d36-415d-b3ab-59b0ccbb1c88">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>productType</con:name>
              <con:value>Template_regress77745560000000000</con:value>
            </con:property>
            <con:property>
              <con:name>appType</con:name>
              <con:value>appType</con:value>
            </con:property>
            <con:property>
              <con:name>eventType</con:name>
              <con:value>eventType</con:value>
            </con:property>
            <con:property>
              <con:name>channelType</con:name>
              <con:value>inbrowser</con:value>
            </con:property>
            <con:property>
              <con:name>locale</con:name>
              <con:value>EN-US</con:value>
            </con:property>
            <con:property>
              <con:name>contactName</con:name>
              <con:value>22dionysus@pearson.com</con:value>
            </con:property>
            <con:property>
              <con:name>message</con:name>
              <con:value>EN-US message</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>Success</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>ID</con:name>
              <con:value>TC_valid_all</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="e1c4cd44-1984-4f49-b8d9-ff0553e627b0">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": " ",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="status">
              <con:configuration>
                <token>400</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="50511465-150b-4b84-84a4-0c2dd68faa5a" name="message">
              <con:configuration>
                <token>eventType is required</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiOTk5NzE1MDcyMWVjNDdlYjkyZTJlNDZiYTQxNTY4OGEiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MX0.Cjidrpo2cnw-q3x6VY2qagHMWTcpxaiTR_R5vJ1ZFbyUOfA6_FKAFju7psAGdxgZA49h__Brl630oKBPMkkCZNOnlYOPSbB-E9SIPKRaSf8lbiYIYMvPhTs5moFTs_f1_lvPN7ApxtgUSYVhueHC939TkzwHE4FyoPDn5BIL-qE" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>x-Authorization</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="376f0292-5f72-4c7c-8f06-88bd6bcd378c" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_null_AppType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="ReadExcel" id="03bd95a0-5aac-49f8-914b-39e44deb9c2b">
        <con:settings/>
        <con:config>
          <script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties" id="580f9153-ba2d-4925-8501-0c4b2a4a3618">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>productType</con:name>
              <con:value>Template_regress77745560000000000</con:value>
            </con:property>
            <con:property>
              <con:name>appType</con:name>
              <con:value>appType</con:value>
            </con:property>
            <con:property>
              <con:name>eventType</con:name>
              <con:value>eventType</con:value>
            </con:property>
            <con:property>
              <con:name>channelType</con:name>
              <con:value>inbrowser</con:value>
            </con:property>
            <con:property>
              <con:name>locale</con:name>
              <con:value>EN-US</con:value>
            </con:property>
            <con:property>
              <con:name>contactName</con:name>
              <con:value>22dionysus@pearson.com</con:value>
            </con:property>
            <con:property>
              <con:name>message</con:name>
              <con:value>EN-US message</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>Success</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>ID</con:name>
              <con:value>TC_valid_all</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="afa6f095-2063-4cab-9cb1-fba299b4ca4a">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": " ",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="status">
              <con:configuration>
                <token>400</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="50511465-150b-4b84-84a4-0c2dd68faa5a" name="message">
              <con:configuration>
                <token>appType is required</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiMGRiMWM3Y2VlMDIwNDcwMThkNTk0NzQyZTAwMzFmZjMiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.caYUI_YviQe7v_CSIswdneVAm9CQnps-e6sFsI9IAc_uf4-QXVdPvqy9owwsPzp1Df3-e17VEHUKXOpB3RBXNMUoIBJZx-qRLLVKeis3a7C0JW5bUPsMsSUsqt2jul6rKtWSTdf3S1ZmdXQ73vTAEjFsUUpm5ZpD9FxGhJtGMjI" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>x-Authorization</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="13358e46-2ca7-440a-bb87-2cd803de9e71" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_null_ChannelType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="ReadExcel" id="cbe02726-d3ea-458e-bced-6a12a532ea9d">
        <con:settings/>
        <con:config>
          <script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties" id="4e436f2f-d157-419a-885b-5e2c536f14a1">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>productType</con:name>
              <con:value>Template_regress77745560000000000</con:value>
            </con:property>
            <con:property>
              <con:name>appType</con:name>
              <con:value>appType</con:value>
            </con:property>
            <con:property>
              <con:name>eventType</con:name>
              <con:value>eventType</con:value>
            </con:property>
            <con:property>
              <con:name>channelType</con:name>
              <con:value>inbrowser</con:value>
            </con:property>
            <con:property>
              <con:name>locale</con:name>
              <con:value>EN-US</con:value>
            </con:property>
            <con:property>
              <con:name>contactName</con:name>
              <con:value>22dionysus@pearson.com</con:value>
            </con:property>
            <con:property>
              <con:name>message</con:name>
              <con:value>EN-US message</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>Success</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>ID</con:name>
              <con:value>TC_valid_all</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="a0d31eff-33a3-4644-bcf7-63080d3ef0d5">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": " ",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="status">
              <con:configuration>
                <token>400</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="50511465-150b-4b84-84a4-0c2dd68faa5a" name="message">
              <con:configuration>
                <token>Template missing a required field</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiMjkwNTBkZGRiZDFiNDlhZmI3Mzk0NDJkNGJkN2Q0ZDciLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.Sxjvq4rrgmRPhkx-0aFmkLgY8IHiLfBMjkbkqkCAAo00ryCyhJQVCHoN92S7-9i6IpxTCiG9DkeT-kD0l2ZWzOuudgls7L5vlg9xClySnNQryIOtpsaFfemQBHCmh0IRYTr59kwSWOfsQ7EuEFMKFh6JKF0WqDIn5KN-dEBo3Ec" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>x-Authorization</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="3be7437a-f2df-4f6f-b58f-ca06ec62a337" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_null_locale" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="ReadExcel" id="9db22510-e37b-4422-a4f3-39386577a727">
        <con:settings/>
        <con:config>
          <script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties" id="31c42f2e-1ad0-409e-81a3-b3252520561d">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>productType</con:name>
              <con:value>Template_regress77745560000000000</con:value>
            </con:property>
            <con:property>
              <con:name>appType</con:name>
              <con:value>appType</con:value>
            </con:property>
            <con:property>
              <con:name>eventType</con:name>
              <con:value>eventType</con:value>
            </con:property>
            <con:property>
              <con:name>channelType</con:name>
              <con:value>inbrowser</con:value>
            </con:property>
            <con:property>
              <con:name>locale</con:name>
              <con:value>EN-US</con:value>
            </con:property>
            <con:property>
              <con:name>contactName</con:name>
              <con:value>22dionysus@pearson.com</con:value>
            </con:property>
            <con:property>
              <con:name>message</con:name>
              <con:value>EN-US message</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>Success</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>ID</con:name>
              <con:value>TC_valid_all</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="ea159a6f-7e5d-4934-9142-72672f31c5f9">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": " ",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == " ",'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting [" "] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains">
              <con:configuration>
                <token>201</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiNjFlMThjMTEwMjBkNDgyOTkzYzhkNTcwY2I0ZjU3ODIiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.fyWxTdKDNhDwzG_siBG5pi3lysONMkM8jjPCNkTko48iLvJv_nsNEDBsmmayPp1AusT5eMmnDEg83nWat8-cW6j2VfvgVl5W3EZ2EjJnKca2QTI-_z1Diwgs205DvgDLNSTTECf2_eONpd_7lrIHMAS0JZ_sjbhxu1-EghFGRXo" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>x-Authorization</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Loop" id="7dc91b10-5400-4766-aa32-d7b945d99158" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TemplateIdTransfer 1" id="3ae87f4e-b960-4224-9673-08a2738aeed8">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>DeleteTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="56e97e26-a6f9-421c-ae00-87ec47a99f5b">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request/>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion">
              <con:configuration>
                <token>204</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="a58f0604-c653-4074-b171-f34dcdc95f4a" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="bcb1049a-f4f0-402d-a9b4-4e55a391593c" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_null_ContactName" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="ReadExcel" id="1f19ad8d-f201-4d64-8250-928cbbd89f1b">
        <con:settings/>
        <con:config>
          <script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties" id="54d51ae2-4686-458e-9e64-d218aa94caf0">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>productType</con:name>
              <con:value>Template_regress77745560000000000</con:value>
            </con:property>
            <con:property>
              <con:name>appType</con:name>
              <con:value>appType</con:value>
            </con:property>
            <con:property>
              <con:name>eventType</con:name>
              <con:value>eventType</con:value>
            </con:property>
            <con:property>
              <con:name>channelType</con:name>
              <con:value>inbrowser</con:value>
            </con:property>
            <con:property>
              <con:name>locale</con:name>
              <con:value>EN-US</con:value>
            </con:property>
            <con:property>
              <con:name>contactName</con:name>
              <con:value>22dionysus@pearson.com</con:value>
            </con:property>
            <con:property>
              <con:name>message</con:name>
              <con:value>EN-US message</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>Success</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>ID</con:name>
              <con:value>TC_valid_all</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="d5cb2718-1ad2-4278-b726-31e8c269365b">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": " ",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == " ",'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting [ ] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting [" "] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains">
              <con:configuration>
                <token>201</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiZDZkY2Q5ZjU4MGViNDQ1Mjk5MDhiNWM5N2ZjOGJlYWIiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.h2JWye0NUOKn9PEARmH5avnuq4S3ZoQ7Wz5CaumgW7LE_Zr4_gmtqS1P87u4g_khPdJu7R4j_p_jvd45vB2U3ypzc07PxDWeXeZQxtowCV4-__dTj76GO-Odj1D66UBLuWz9zinsVlKxs2H_3v6znQJ-a8_ZflnBUIgqbM2UPbg" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>x-Authorization</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Loop" id="fa347d50-44db-4683-8247-b11e4e45809d" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TemplateIdTransfer 1" id="1428ce8e-33c2-4bf2-9db4-1f35653d61b5">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>DeleteTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="5c0efd91-94e5-4ec3-8f35-bd75bd9d5a87">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request/>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion">
              <con:configuration>
                <token>204</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="e68c8375-b815-4390-b016-e67f8d24a208" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="d5ffb1d1-85c1-41f2-851c-19bb946c6878" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_null_Message" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="ReadExcel" id="0e15d459-d3f7-4bec-bd25-e3ac51950d2b">
        <con:settings/>
        <con:config>
          <script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties" id="2a9e5a20-f45d-466f-b118-1c1cf874e382">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>productType</con:name>
              <con:value>Template_regress77745560000000000</con:value>
            </con:property>
            <con:property>
              <con:name>appType</con:name>
              <con:value>appType</con:value>
            </con:property>
            <con:property>
              <con:name>eventType</con:name>
              <con:value>eventType</con:value>
            </con:property>
            <con:property>
              <con:name>channelType</con:name>
              <con:value>inbrowser</con:value>
            </con:property>
            <con:property>
              <con:name>locale</con:name>
              <con:value>EN-US</con:value>
            </con:property>
            <con:property>
              <con:name>contactName</con:name>
              <con:value>22dionysus@pearson.com</con:value>
            </con:property>
            <con:property>
              <con:name>message</con:name>
              <con:value>EN-US message</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>Success</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>ID</con:name>
              <con:value>TC_valid_all</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="d7ab3574-d09b-4974-88cd-e424dd4aee98">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": " " }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == " ",'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting [ ] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+ expectedValue+'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains">
              <con:configuration>
                <token>201</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiY2M2MTQyMjM5YzkxNGYzMzk3MTc5YmZlMTZlMDQ4OWYiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.guMElXpbFbLPFbbAfV9rTksc7HxXzO7QStO-c__rFGtzFV1HuiqhWneoiKbXJUhtezhkKl55fstVPzyZ0HEzQadhxn8Fr5iXn81hW34BLThrCW2mTns3-bQXUtT9CUkVZkMs56BqMU71ciuIsO3wQ9XFLn3UeKL7_P428o-0ia8" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>x-Authorization</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Loop" id="704bab2d-2867-412d-9d79-1cbd55bc3b20" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TemplateIdTransfer 1" id="7e682a35-e5c7-43f4-9069-981fc98db5a0">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>DeleteTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="482cb23a-da97-467a-815e-964c5652d121">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request/>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion">
              <con:configuration>
                <token>204</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="708e56c4-83ed-4ee7-9c1f-30b623f078ad" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="af014517-76b7-48c7-8140-6310d1069d3f" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_invalid_ChannelType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="ReadExcel" id="dc3f1eb8-c8f8-43be-a035-e03cf41235df">
        <con:settings/>
        <con:config>
          <script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties" id="4a820d38-a207-451c-a6e2-6c55e8d81fff">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>productType</con:name>
              <con:value>Template_regress77745560000000000</con:value>
            </con:property>
            <con:property>
              <con:name>appType</con:name>
              <con:value>appType</con:value>
            </con:property>
            <con:property>
              <con:name>eventType</con:name>
              <con:value>eventType</con:value>
            </con:property>
            <con:property>
              <con:name>channelType</con:name>
              <con:value>inbrowser</con:value>
            </con:property>
            <con:property>
              <con:name>locale</con:name>
              <con:value>EN-US</con:value>
            </con:property>
            <con:property>
              <con:name>contactName</con:name>
              <con:value>22dionysus@pearson.com</con:value>
            </con:property>
            <con:property>
              <con:name>message</con:name>
              <con:value>EN-US message</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>Success</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>ID</con:name>
              <con:value>TC_valid_all</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="d78f54ff-6cf5-41bd-94a1-02229486b785">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "invalid",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="status">
              <con:configuration>
                <token>400</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="50511465-150b-4b84-84a4-0c2dd68faa5a" name="message">
              <con:configuration>
                <token>Template missing a required field</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiNjgxNTc3MjdjYjYwNDFkYzhmZjdhN2Y3NmUzYTE5M2MiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.BUHJzqcnSbIYiaLofnF7ZApkwmRW_4h7hqqQd4Gy9KBDRj1EFAFkmOWZ9YXq4xX22nCQU1OmWPorfEq8neRvTmkwtJkBQQNOsNtpiIyZ5Q0jKCab7PX6UxQIueecipyWZE0kaL8hONv25guFofBZ-QkgqEV8zAOX8Y1vZaYO2So" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>x-Authorization</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="7f059165-6a19-4bb9-80a6-d68dd473bef2" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_specialChar_productType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="ReadExcel" id="ed6fc24f-aee7-40e4-9c4e-c0edc5aa0729">
        <con:settings/>
        <con:config>
          <script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties" id="dfbba409-7a43-471d-8200-b7262fafef39">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>productType</con:name>
              <con:value>Template_regress77745560000000000</con:value>
            </con:property>
            <con:property>
              <con:name>appType</con:name>
              <con:value>appType</con:value>
            </con:property>
            <con:property>
              <con:name>eventType</con:name>
              <con:value>eventType</con:value>
            </con:property>
            <con:property>
              <con:name>channelType</con:name>
              <con:value>inbrowser</con:value>
            </con:property>
            <con:property>
              <con:name>locale</con:name>
              <con:value>EN-US</con:value>
            </con:property>
            <con:property>
              <con:name>contactName</con:name>
              <con:value>22dionysus@pearson.com</con:value>
            </con:property>
            <con:property>
              <con:name>message</con:name>
              <con:value>EN-US message</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>Success</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>ID</con:name>
              <con:value>TC_valid_all</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="47966870-1813-4097-9bbf-cddd586a37d5">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "invalid#:::::",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = "invalid#:::::"
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains">
              <con:configuration>
                <token>201</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiZDVkMGM4ZWQ5MTMwNDc3NGEyZDU3YmRjMGE2YzljMzEiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.Dp6Xr3lFXuVnwNDGIWr2f-T0hoGgXGP0LPlf7_kTod5bZ05fz2nQe2B2zoAb-NuWaHSrb_1c8bAcsMgTGmydoLJ1wUJCQKedSIsriEatpRlfhPiCQo_HG2VRZZPJE0hOfsl2q66PRHRrVqxZUcbwU43d9oH38guJT0m_Fe8-oTo" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>x-Authorization</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TemplateIdTransfer 1" id="1e61a247-2de9-4b24-838d-73b8f79ef644">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>DeleteTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="99cecc37-a9d1-4aff-808f-54f05bd8e870">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request/>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion">
              <con:configuration>
                <token>204</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="400a82be-9285-4dd4-b9d6-cdaa997c2912" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="d849b246-7971-4e62-9ee0-c6f27d67e67d" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_specialChar_appType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="ReadExcel" id="a8d50462-a181-4631-88d1-c243af476c52">
        <con:settings/>
        <con:config>
          <script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties" id="3c187b65-21a3-415a-b1f2-ce1d969a1537">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>productType</con:name>
              <con:value>Template_regress77745560000000000</con:value>
            </con:property>
            <con:property>
              <con:name>appType</con:name>
              <con:value>appType</con:value>
            </con:property>
            <con:property>
              <con:name>eventType</con:name>
              <con:value>eventType</con:value>
            </con:property>
            <con:property>
              <con:name>channelType</con:name>
              <con:value>inbrowser</con:value>
            </con:property>
            <con:property>
              <con:name>locale</con:name>
              <con:value>EN-US</con:value>
            </con:property>
            <con:property>
              <con:name>contactName</con:name>
              <con:value>22dionysus@pearson.com</con:value>
            </con:property>
            <con:property>
              <con:name>message</con:name>
              <con:value>EN-US message</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>Success</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>ID</con:name>
              <con:value>TC_valid_all</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="cb16f841-f66a-4b22-896a-a87b4d528323">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": "###invalid#:#",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = "###invalid#:#"
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = "###invalid#:#"
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains">
              <con:configuration>
                <token>201</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiY2U0ODRmMGYwMTA2NGVhNmI4M2JjZWMxODZhNmYwMTgiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.TMjNw7LxFe1m9QlfhgJwoGdhqCGtjXwYf_ktM5sth8aVUVavQZ_aLY0p1s0xqXIBZwfTw2oiWSEOB6Ap6xj2ei_04W_zooIN5_edaBcQcXxq8FzjfZsCht0on3NeRCVQA8WuafGTHilizWdGK5pJTVfzO73TdwUZo4mEEFTSPLs" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>x-Authorization</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TemplateIdTransfer 1" id="ba832252-e2cc-4908-ab16-5f4051f4c65d">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>DeleteTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="e75a1e42-6153-484d-97eb-0010b4cdefcf">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request/>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion">
              <con:configuration>
                <token>204</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="c8c3d226-dd7b-44d4-b75e-16c88bda1bf9" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="953f21b1-c5c3-439e-b78a-e8fba350e94f" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_specialChar_eventType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="ReadExcel" id="020ded36-242f-4f45-ba37-3276b01c2e62">
        <con:settings/>
        <con:config>
          <script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties" id="79793bc2-b97f-42d8-83da-8f2e0be5e931">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>productType</con:name>
              <con:value>Template_regress77745560000000000</con:value>
            </con:property>
            <con:property>
              <con:name>appType</con:name>
              <con:value>appType</con:value>
            </con:property>
            <con:property>
              <con:name>eventType</con:name>
              <con:value>eventType</con:value>
            </con:property>
            <con:property>
              <con:name>channelType</con:name>
              <con:value>inbrowser</con:value>
            </con:property>
            <con:property>
              <con:name>locale</con:name>
              <con:value>EN-US</con:value>
            </con:property>
            <con:property>
              <con:name>contactName</con:name>
              <con:value>22dionysus@pearson.com</con:value>
            </con:property>
            <con:property>
              <con:name>message</con:name>
              <con:value>EN-US message</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>Success</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>ID</con:name>
              <con:value>TC_valid_all</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="9b18520e-9fed-41be-bf45-7c268f747415">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "###invalid#:#",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = "###invalid#:#"
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains">
              <con:configuration>
                <token>201</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiYTQ0Y2NlZjRmZWFjNGI4NjgyZGU1YWRjZDg4ZjlkODciLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.Iky6rrk3R52hu7qLSJKqSfF2dCr8GIg-4X56-yzpCDGq7kRb4XKNeiDl0yR-z2r9ti39D3RJHxAEGIWwvspzkiDINrncQtaS5hY-ZLw-SwWi1SwV5tEXVknK51U7ChfgU31ywvYVYBc2Rt_hdBdsDuIgs4xVCJMnV_eQGw0M4Q0" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>x-Authorization</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TemplateIdTransfer 1" id="9e337f5b-63a4-4911-aeba-da638f7531ec">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>DeleteTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="ae705f77-cd37-4e67-b564-af76900e8eaa">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request/>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion">
              <con:configuration>
                <token>204</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="d5a9bb54-2895-431b-a238-acb68ca343c3" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="3a6c6647-4087-4609-900d-d2214458b72b" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_specialChar_ChannelType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="ReadExcel" id="50b68b75-82d7-4ff7-aa09-b339669a428f">
        <con:settings/>
        <con:config>
          <script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties" id="f0bfb05b-ae73-45de-b196-5f86e4cb58ab">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>productType</con:name>
              <con:value>Template_regress77745560000000000</con:value>
            </con:property>
            <con:property>
              <con:name>appType</con:name>
              <con:value>appType</con:value>
            </con:property>
            <con:property>
              <con:name>eventType</con:name>
              <con:value>eventType</con:value>
            </con:property>
            <con:property>
              <con:name>channelType</con:name>
              <con:value>inbrowser</con:value>
            </con:property>
            <con:property>
              <con:name>locale</con:name>
              <con:value>EN-US</con:value>
            </con:property>
            <con:property>
              <con:name>contactName</con:name>
              <con:value>22dionysus@pearson.com</con:value>
            </con:property>
            <con:property>
              <con:name>message</con:name>
              <con:value>EN-US message</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>Success</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>ID</con:name>
              <con:value>TC_valid_all</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="c9f1639d-bad7-4837-bb40-7a98b573ebec">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "###invalid#:#",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="status">
              <con:configuration>
                <token>400</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="50511465-150b-4b84-84a4-0c2dd68faa5a" name="message">
              <con:configuration>
                <token>Template missing a required field</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiYzgzMWZkZjc4MmFlNDgzMmFmMjU4MzFmNzBhMTMwNGEiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MX0.C0oum7GBaG7r9miRpWDO-DjPKluogQM0mU3XeYIipmw8Cn24vgj7WZOZl5McHVgVk5sGJWshGRiS1NZ4rgUmz9cTa5YuvrnFDCRxs3oEUDOfqmSmcxKqHV5OzHaN7tUeVHgmS9yWy9-bGjo-K5azRnnr54X__GWUx4e5Ls2s1Y0" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>x-Authorization</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="a53951d2-19c3-4aba-9a0d-fb070988b543" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_specialChar_locale" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="ReadExcel" id="5d1e25ff-3673-4826-bb0b-51a2233c635c">
        <con:settings/>
        <con:config>
          <script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties" id="bfacabad-c216-48cf-8900-b2b67d49a041">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>productType</con:name>
              <con:value>Template_regress77745560000000000</con:value>
            </con:property>
            <con:property>
              <con:name>appType</con:name>
              <con:value>appType</con:value>
            </con:property>
            <con:property>
              <con:name>eventType</con:name>
              <con:value>eventType</con:value>
            </con:property>
            <con:property>
              <con:name>channelType</con:name>
              <con:value>inbrowser</con:value>
            </con:property>
            <con:property>
              <con:name>locale</con:name>
              <con:value>EN-US</con:value>
            </con:property>
            <con:property>
              <con:name>contactName</con:name>
              <con:value>22dionysus@pearson.com</con:value>
            </con:property>
            <con:property>
              <con:name>message</con:name>
              <con:value>EN-US message</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>Success</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>ID</con:name>
              <con:value>TC_valid_all</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="e324ff5a-a2ef-4f53-98ba-293d5af2cfca">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "###invalid#:#",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = "###invalid#:#"
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains">
              <con:configuration>
                <token>201</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiNTVjMGVlODMwZTQwNDk4ZWI4ZDE3NGQ4MjViZjhlMTgiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.c2uGG3W6oYZHhwdFZyuoviYHexdw7neW9ywMvhntaRendGxIuwg9kujYo4cbPy3VkosEQdsl0bHFUKr6hYfEe_RWS6DV5BpfFRT4SM3DOT1COAzH43X5wC_Mzk6SePyxkwarwT7uyKtDciMXwb0lekfmwdb-szPVU1LjdK95v8c" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>x-Authorization</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TemplateIdTransfer 1" id="099b4861-f0b2-4471-8ba9-854ae453cd73">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>DeleteTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="186a7880-3bff-4e4f-9140-2bca774a09c3">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request/>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion">
              <con:configuration>
                <token>204</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="a99f5d0a-f16c-4b0a-86b7-8b32a2938900" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="5edb85f7-464f-45a4-a0f7-9323a1f1c300" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_specialChar_ContactName" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="ReadExcel" id="c454bb96-d8c6-4e86-8bfe-463ecc994c0a">
        <con:settings/>
        <con:config>
          <script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties" id="a03a1abb-1680-4696-8ca5-2e33fa0e3535">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>productType</con:name>
              <con:value>Template_regress77745560000000000</con:value>
            </con:property>
            <con:property>
              <con:name>appType</con:name>
              <con:value>appType</con:value>
            </con:property>
            <con:property>
              <con:name>eventType</con:name>
              <con:value>eventType</con:value>
            </con:property>
            <con:property>
              <con:name>channelType</con:name>
              <con:value>inbrowser</con:value>
            </con:property>
            <con:property>
              <con:name>locale</con:name>
              <con:value>EN-US</con:value>
            </con:property>
            <con:property>
              <con:name>contactName</con:name>
              <con:value>22dionysus@pearson.com</con:value>
            </con:property>
            <con:property>
              <con:name>message</con:name>
              <con:value>EN-US message</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>Success</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>ID</con:name>
              <con:value>TC_valid_all</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="a3af43c4-9c01-4ebf-9f67-410a902c5044">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "###invalid#:#",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = "###invalid#:#"
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains">
              <con:configuration>
                <token>201</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiNTg4OTIxMWM5OTYxNDQ5MDkwNGYwY2E1NDZjYzg4ZDEiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.DfxBOawwbBfOPv0Nfx3qc5gsabvEeCtr_dyoBO8-kqpY_qCZRMDEn-uBytXT6xITKPbIIkxoqg44iJ_AWO8BdRYwNjjRHynAXTjCQm7ziWh5WW7qSDCxIbDZ1HegLZ3e5m5TQj1Ewmi0rYhNs0JEJQugvgt8ExHgCPAXoD01wxs" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>x-Authorization</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TemplateIdTransfer 1" id="73303bbe-0f76-4e89-968b-1599101b7894">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>DeleteTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="a587859a-c0de-4a16-9e1a-6ee38810ab55">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request/>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion">
              <con:configuration>
                <token>204</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="4368b32e-f611-46b3-88a3-a1c80032d4aa" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="52df1494-6947-4e4a-900c-e0309b943597" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="CreateTemplate_specialChar_Message" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="ReadExcel" id="5e34e8bc-1581-45cc-9c2f-78e8db82ca1f">
        <con:settings/>
        <con:config>
          <script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties" id="601853a5-c5fb-46b0-a867-e72e38450d00">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>productType</con:name>
              <con:value>Template_regress77745560000000000</con:value>
            </con:property>
            <con:property>
              <con:name>appType</con:name>
              <con:value>appType</con:value>
            </con:property>
            <con:property>
              <con:name>eventType</con:name>
              <con:value>eventType</con:value>
            </con:property>
            <con:property>
              <con:name>channelType</con:name>
              <con:value>inbrowser</con:value>
            </con:property>
            <con:property>
              <con:name>locale</con:name>
              <con:value>EN-US</con:value>
            </con:property>
            <con:property>
              <con:name>contactName</con:name>
              <con:value>22dionysus@pearson.com</con:value>
            </con:property>
            <con:property>
              <con:name>message</con:name>
              <con:value>EN-US message</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>Success</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>ID</con:name>
              <con:value>TC_valid_all</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="c347abd7-7783-4d87-8a33-1d6c19b2430f">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "###invalid#:#" }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = "###invalid#:#"
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains">
              <con:configuration>
                <token>201</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiZjAwNGY4NmE5ZWYzNGY5NWJkYjcwMjlhNzE2ZWFlMzIiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MX0.Oze8NutKbExusbi1MX-KYyxceEAyWpd5WTJ6SHe7FYz6sC27p50t2Q-BIAvzRqdWbVoilbACqf4DrCNoAdEKb-ttCu2titLkH_XK8N-loxiiaswy_qDlrPArNozNwuULQN7cPYbosDmThVb-fpumeQPXq_imK7-oYaG52sTI8ao" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>x-Authorization</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TemplateIdTransfer 1" id="ce899dbe-00c7-49e8-b1fb-415068e79bef">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>DeleteTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="cf62d563-824c-40d4-9793-431466c02637">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request/>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion">
              <con:configuration>
                <token>204</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="780e35ec-e2ff-4434-95b5-e02f07cf62d3" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="cdec8734-48e8-41cd-91de-9f0e7706795e" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="ReCreateTemplate_all_valid" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="ReadExcel" id="0164e894-300e-41b9-b342-00766aa85bee">
        <con:settings/>
        <con:config>
          <script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties" id="3c10c44d-ad75-487f-8865-469f8422cc22">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>productType</con:name>
              <con:value>Template_regress77745560000000000</con:value>
            </con:property>
            <con:property>
              <con:name>appType</con:name>
              <con:value>appType</con:value>
            </con:property>
            <con:property>
              <con:name>eventType</con:name>
              <con:value>eventType</con:value>
            </con:property>
            <con:property>
              <con:name>channelType</con:name>
              <con:value>inbrowser</con:value>
            </con:property>
            <con:property>
              <con:name>locale</con:name>
              <con:value>EN-US</con:value>
            </con:property>
            <con:property>
              <con:name>contactName</con:name>
              <con:value>22dionysus@pearson.com</con:value>
            </con:property>
            <con:property>
              <con:name>message</con:name>
              <con:value>EN-US message</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>Success</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>ID</con:name>
              <con:value>TC_valid_all</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="5658e6af-c833-40a8-924d-39b592a9214b">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "RESTAssured_vishal",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Status">
              <con:configuration>
                <token>409</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="e209381e-9a4d-4fb8-816d-1df4c2e76d5f" name="Message">
              <con:configuration>
                <token>This template already exists.</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiNTJmNWE4OGM2ZjdkNGI3ODhhMDc3ZWUyMTMzZTJhMzMiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MX0.eHCk8fotWYsps1QfLkKK23G5xkdHbHfXe2CH7LmL5n-SSutITNgt2P-oBRC1WnHxYRWcGV05yumT82wfBFuuSx9ERz95ZGug2rwsygP5enWZ7rg4TvYLqnTJlBmE-KVkIyDUvlOr_47X89ShZ-9KHQjFD2f-Wn35JLxeGVWOsy8" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>x-Authorization</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="293fb6be-a194-40a5-aa39-7a5d8d6c7602" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplate_all_valid" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="ReadExcel" id="a43537a8-775d-4f0f-bbec-b91e382271ac">
        <con:settings/>
        <con:config>
          <script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties" id="2cd39ccc-6c14-4014-94b7-be0c1ac03e07">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>productType</con:name>
              <con:value>Template_regress77745560000000000</con:value>
            </con:property>
            <con:property>
              <con:name>appType</con:name>
              <con:value>appType</con:value>
            </con:property>
            <con:property>
              <con:name>eventType</con:name>
              <con:value>eventType</con:value>
            </con:property>
            <con:property>
              <con:name>channelType</con:name>
              <con:value>inbrowser</con:value>
            </con:property>
            <con:property>
              <con:name>locale</con:name>
              <con:value>EN-US</con:value>
            </con:property>
            <con:property>
              <con:name>contactName</con:name>
              <con:value>22dionysus@pearson.com</con:value>
            </con:property>
            <con:property>
              <con:name>message</con:name>
              <con:value>EN-US message</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>Success</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>ID</con:name>
              <con:value>TC_valid_all</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="ee01ac3f-8b7d-43ca-82cd-32ef7acdf97a">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains">
              <con:configuration>
                <token>201</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiMDkxYTQ4NWUzYzM1NGQ5YmFkY2I4YzU5ZDA1OGUyZmQiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.IZGXw2YuiymOlMebf2FME7QQaGGfsDskSR_-RvDtIfrtx1qgeIgmU560EZ0hK95kah3btCYK_4cDj_FfCyxurRrt_7pwdPbBeO-ICqOZFI-WqFIwyLs9zgvvE2ITdoiPWpRASf2Iij22Xg4O7G4gwRb3a6dYe6K3GA031zlHPjY" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>x-Authorization</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TemplateIdTransfer" id="6234a184-0bd2-4cb8-bcaf-6791f2f0b28b">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>GetTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="GetTemplate - Request 1" id="690d2810-53a0-40bd-9601-d16376a17c64">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains">
              <con:configuration>
                <token>200</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="c343b6f1-20f0-4194-8ad6-5dca74712f69" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TemplateIdTransfer2" id="3904c30c-390b-4750-ac51-a0beede717ca">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>DeleteTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="bcd5d4c8-e676-4edd-80bd-25ab5d3d8e1f">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request/>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion">
              <con:configuration>
                <token>204</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="c343b6f1-20f0-4194-8ad6-5dca74712f69" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Loop" id="d7d32066-ba46-460c-9485-33ca6f1a4884" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="1eb07b4a-c85e-438a-a338-cf557229dcf3" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplate_invalid" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="GetTemplate - Request 1" id="107534e7-f702-43ea-8a05-27b7f70ce2d3">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains">
              <con:configuration>
                <token>404</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="42b0c274444444444444444444444" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="cf8c4de6-7fde-4e42-a042-4701a3da200c" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplate_null" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="GetTemplate - Request 1" id="577f8ddb-16b1-4761-92b4-00432c3a6b8d">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains">
              <con:configuration>
                <token>405</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="ec87c120-afe1-43be-be63-79f7823b876a" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplate_specialChar" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="GetTemplate - Request 1" id="8da6dd03-7180-48fb-bf60-c9c40c0a3e34">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains">
              <con:configuration>
                <token>404</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="@amp;" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="98449dbe-4e2f-4d92-809b-e9c1596faee5" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_all_valid" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="ReadExcel" id="76753625-3f40-4f00-97d9-622268b1f93e">
        <con:settings/>
        <con:config>
          <script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties" id="8437af1d-c6c7-4ad0-9b00-dcecb49d3760">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>productType</con:name>
              <con:value>Template_regress77745560000000000</con:value>
            </con:property>
            <con:property>
              <con:name>appType</con:name>
              <con:value>appType</con:value>
            </con:property>
            <con:property>
              <con:name>eventType</con:name>
              <con:value>eventType</con:value>
            </con:property>
            <con:property>
              <con:name>channelType</con:name>
              <con:value>inbrowser</con:value>
            </con:property>
            <con:property>
              <con:name>locale</con:name>
              <con:value>EN-US</con:value>
            </con:property>
            <con:property>
              <con:name>contactName</con:name>
              <con:value>22dionysus@pearson.com</con:value>
            </con:property>
            <con:property>
              <con:name>message</con:name>
              <con:value>EN-US message</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>Success</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>ID</con:name>
              <con:value>TC_valid_all</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="62faf9ab-9a63-4f2a-af25-01a291e63b2d">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains">
              <con:configuration>
                <token>201</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiMDcyMjUwY2ExZjVhNDY1N2I3MzRkZjJlYzEwNTJiMjMiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.VhUZkmkd1_NJtwh7es1rFpIEnntnuG0UsVZ8p8qIMudMQ5CRVa-B4BgY9MHdC1i3rpsXIaymqlFzHtBBTkj6kAGp4-K1wbU7aqs9eyu1qDOdh2xM9FeBhLzozYS7JlNua-wPRFBEDB7hdt30a66KS-dvOelh3UvS9LzchzLfWf4" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>x-Authorization</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="productTypeTransfer" id="6efea1e0-555a-4bfb-9a95-29ab0edd0e2f">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.productType</con:sourcePath>
            <con:targetType>productType</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="appTypeTransfer" id="16f892e0-0a3c-45e8-9aab-25a0c3e8d927">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.appType</con:sourcePath>
            <con:targetType>appType</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="ChannelTransfer" id="c6de2a86-64af-4513-ba13-1147251de8c3">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.channelType</con:sourcePath>
            <con:targetType>channel</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="EventTransfer" id="feeb8391-6fd4-4b34-8867-7f8f611264f3">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.eventType</con:sourcePath>
            <con:targetType>eventType</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="localeTransfer" id="b52a7b3d-6071-4b29-a9b4-238f87a9d9d8">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.template.locale</con:sourcePath>
            <con:targetType>locale</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="GetTemplate_altid" id="ecc1a9ac-8fb4-4b5a-a497-841cea2607a0">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains">
              <con:configuration>
                <token>200</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="locale" value="EN-US"/>
              <con:entry key="eventType" value="eventType"/>
              <con:entry key="appType" value="appType"/>
              <con:entry key="channel" value="inbrowser"/>
              <con:entry key="productType" value="Template_regress77745560000000000"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>productType</con:entry>
              <con:entry>appType</con:entry>
              <con:entry>eventType</con:entry>
              <con:entry>channel</con:entry>
              <con:entry>locale</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TemplateIdTransfer 1" id="1156c9e2-d078-4304-9189-1d63d560a178">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>DeleteTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="ca9be08b-50cb-4a8b-ae2d-69d7d4ee2a23">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request/>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion">
              <con:configuration>
                <token>204</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="1fa5eb4d-aecc-4939-a50f-88b10b5a4673" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Loop" id="a18c82fb-0599-4081-8b3b-2f5d51194ec9" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="f4058a53-5888-4f64-8925-25b45362cd40" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_invalid_productType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="GetTemplate_altid" id="2ad0f741-e9c2-4953-bbd2-9533d819e083">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains">
              <con:configuration>
                <token>404</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="locale" value="EN-US"/>
              <con:entry key="eventType" value="eventType"/>
              <con:entry key="appType" value="appType"/>
              <con:entry key="channel" value="inbrowser"/>
              <con:entry key="productType" value="invalid78"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>productType</con:entry>
              <con:entry>appType</con:entry>
              <con:entry>eventType</con:entry>
              <con:entry>channel</con:entry>
              <con:entry>locale</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="93fdb2d3-85ac-4cf8-aa9b-225fad924d63" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_invalid_appType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="GetTemplate_altid" id="259e571b-1e8e-4c55-9cd0-26f303e59f1f">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains">
              <con:configuration>
                <token>404</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="locale" value="EN-US"/>
              <con:entry key="eventType" value="eventType"/>
              <con:entry key="channel" value="inbrowser"/>
              <con:entry key="appType" value="invalid"/>
              <con:entry key="productType" value="Template_Sample1"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>productType</con:entry>
              <con:entry>appType</con:entry>
              <con:entry>eventType</con:entry>
              <con:entry>channel</con:entry>
              <con:entry>locale</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="ecd814cd-da45-4f77-a6b5-0eaf1175b82b" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_invalid_ChannelType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="GetTemplate_altid" id="a837a0d7-3d99-4453-b71a-8f9e74c81e3c">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains">
              <con:configuration>
                <token>404</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="locale" value="EN-US"/>
              <con:entry key="eventType" value="eventType"/>
              <con:entry key="appType" value="appType"/>
              <con:entry key="channel" value="invalid"/>
              <con:entry key="productType" value="Template_Sample1"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>productType</con:entry>
              <con:entry>appType</con:entry>
              <con:entry>eventType</con:entry>
              <con:entry>channel</con:entry>
              <con:entry>locale</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="22ef9220-6edf-4cc0-a97d-fd82300ed47d" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_invalid_eventType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="GetTemplate_altid" id="7881ae05-4039-4407-9cee-bf62e102254e">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains">
              <con:configuration>
                <token>404</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="locale" value="EN-US"/>
              <con:entry key="eventType" value="invalid"/>
              <con:entry key="appType" value="appType"/>
              <con:entry key="channel" value="inbrowser"/>
              <con:entry key="productType" value="Template_Sample1"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>productType</con:entry>
              <con:entry>appType</con:entry>
              <con:entry>eventType</con:entry>
              <con:entry>channel</con:entry>
              <con:entry>locale</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="48ecfb15-832b-4981-bf04-48668600c72c" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_invalid_locale" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="GetTemplate_altid" id="d538c6c7-9a22-400a-81ef-138efc220fbb">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains">
              <con:configuration>
                <token>404</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="locale" value="invalid"/>
              <con:entry key="eventType" value="eventType"/>
              <con:entry key="channel" value="inbrowser"/>
              <con:entry key="appType" value="appType"/>
              <con:entry key="productType" value="Template_Sample1"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>productType</con:entry>
              <con:entry>appType</con:entry>
              <con:entry>eventType</con:entry>
              <con:entry>channel</con:entry>
              <con:entry>locale</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="f9a4b6d3-f835-4151-bb7e-abc2a9e1fe28" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_null_productType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="GetTemplate_altid" id="fd915e95-b314-4008-a9ab-ff1edd2fd387">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains">
              <con:configuration>
                <token>404</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="locale" value="EN-US"/>
              <con:entry key="eventType" value="eventType"/>
              <con:entry key="channel" value="inbrowser"/>
              <con:entry key="appType" value="appType"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>productType</con:entry>
              <con:entry>appType</con:entry>
              <con:entry>eventType</con:entry>
              <con:entry>channel</con:entry>
              <con:entry>locale</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="3eeacc2d-9da6-4dea-9f40-2e55a7f189f6" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_null_appType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="GetTemplate_altid" id="9874a024-c3da-4f3c-b808-edeecc6ef2ca">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains">
              <con:configuration>
                <token>404</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="locale" value="EN-US"/>
              <con:entry key="eventType" value="eventType"/>
              <con:entry key="channel" value="inbrowser"/>
              <con:entry key="productType" value="Template_Sample1"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>productType</con:entry>
              <con:entry>appType</con:entry>
              <con:entry>eventType</con:entry>
              <con:entry>channel</con:entry>
              <con:entry>locale</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="16ef49b0-2a0f-41ef-a965-6a95743db3ee" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_null_eventType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="GetTemplate_altid" id="dabc11ed-bd25-4e69-bdff-9107222148d7">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains">
              <con:configuration>
                <token>404</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="locale" value="EN-US"/>
              <con:entry key="channel" value="inbrowser"/>
              <con:entry key="appType" value="appType"/>
              <con:entry key="productType" value="Template_Sample1"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>productType</con:entry>
              <con:entry>appType</con:entry>
              <con:entry>eventType</con:entry>
              <con:entry>channel</con:entry>
              <con:entry>locale</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="bae82c62-b285-4f49-8119-b0aa17715073" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_null_ChannelType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="GetTemplate_altid" id="ea7d0b54-75b0-4a91-9758-3596a88676a5">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains">
              <con:configuration>
                <token>404</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="locale" value="EN-US"/>
              <con:entry key="eventType" value="eventType"/>
              <con:entry key="appType" value="appType"/>
              <con:entry key="productType" value="Template_Sample1"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>productType</con:entry>
              <con:entry>appType</con:entry>
              <con:entry>eventType</con:entry>
              <con:entry>channel</con:entry>
              <con:entry>locale</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="8a732d29-47db-4fe7-bb92-ef302e32e3ff" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_null_locale" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="GetTemplate_altid" id="8a0a86ab-81e8-4f0e-9919-6b3443c50067">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains">
              <con:configuration>
                <token>404</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="eventType" value="eventType"/>
              <con:entry key="appType" value="appType"/>
              <con:entry key="channel" value="inbrowser"/>
              <con:entry key="productType" value="Template_Sample1"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>productType</con:entry>
              <con:entry>appType</con:entry>
              <con:entry>eventType</con:entry>
              <con:entry>channel</con:entry>
              <con:entry>locale</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="f2b1f07a-13f7-4ff5-81a2-bcccc2c4aa0e" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_specialChar_productType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="GetTemplate_altid" id="19e4e612-3da5-4142-aa0f-96bfd0a98d98">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains">
              <con:configuration>
                <token>404</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="locale" value="EN-US"/>
              <con:entry key="eventType" value="eventType"/>
              <con:entry key="appType" value="appType"/>
              <con:entry key="channel" value="inbrowser"/>
              <con:entry key="productType" value="&amp;amp;"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>productType</con:entry>
              <con:entry>appType</con:entry>
              <con:entry>eventType</con:entry>
              <con:entry>channel</con:entry>
              <con:entry>locale</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="09fa9d9e-ae13-4a96-a020-f38471d94c07" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_specialChar_appType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="GetTemplate_altid" id="578b3c05-326d-4860-afb4-996a722664e0">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains">
              <con:configuration>
                <token>404</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="locale" value="EN-US"/>
              <con:entry key="eventType" value="eventType"/>
              <con:entry key="appType" value="&amp;amp;"/>
              <con:entry key="channel" value="inbrowser"/>
              <con:entry key="productType" value="Template_Sample1"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>productType</con:entry>
              <con:entry>appType</con:entry>
              <con:entry>eventType</con:entry>
              <con:entry>channel</con:entry>
              <con:entry>locale</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="0c64a417-0ef9-46a8-81a2-864493d8f694" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_specialChar_eventType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="GetTemplate_altid" id="a542cd32-bd43-4506-a960-a3fb7f31a558">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains">
              <con:configuration>
                <token>404</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="locale" value="EN-US"/>
              <con:entry key="eventType" value="&amp;:"/>
              <con:entry key="appType" value="appType"/>
              <con:entry key="channel" value="inbrowser"/>
              <con:entry key="productType" value="Template_Sample1"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>productType</con:entry>
              <con:entry>appType</con:entry>
              <con:entry>eventType</con:entry>
              <con:entry>channel</con:entry>
              <con:entry>locale</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="e502ab86-b8c6-47cc-9c57-6e02767022f2" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_specialChar_ChannelType" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="GetTemplate_altid" id="3f6c8c0a-386e-4901-a1fa-b6b94c2d143b">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains">
              <con:configuration>
                <token>404</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="locale" value="EN-US"/>
              <con:entry key="eventType" value="eventType"/>
              <con:entry key="channel" value="::;"/>
              <con:entry key="appType" value="appType"/>
              <con:entry key="productType" value="Template_Sample1"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>productType</con:entry>
              <con:entry>appType</con:entry>
              <con:entry>eventType</con:entry>
              <con:entry>channel</con:entry>
              <con:entry>locale</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="5b246b9b-4915-4754-a281-2edfedb785f9" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="GetTemplatebyaltid_specialChar_locale" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="GetTemplate_altid" id="427f45c4-4da8-4c52-a5af-edd76d6b846c">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains">
              <con:configuration>
                <token>404</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="locale" value="###"/>
              <con:entry key="eventType" value="eventType"/>
              <con:entry key="channel" value="inbrowser"/>
              <con:entry key="appType" value="appType"/>
              <con:entry key="productType" value="Template_Sample1"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>productType</con:entry>
              <con:entry>appType</con:entry>
              <con:entry>eventType</con:entry>
              <con:entry>channel</con:entry>
              <con:entry>locale</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="8c4d7df8-fb98-404d-afae-a4c0940915b9" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeleteTemplatebyaltid_all_valid" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="groovy" name="ReadExcel" id="9c4d0956-6a58-48c0-97a2-ae9aefbd0413">
        <con:settings/>
        <con:config>
          <script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="properties" name="Properties" id="bbb8fef2-a66a-4275-ab83-80c3db63066e">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>productType</con:name>
              <con:value>Template_regress77745560000000000</con:value>
            </con:property>
            <con:property>
              <con:name>appType</con:name>
              <con:value>appType</con:value>
            </con:property>
            <con:property>
              <con:name>eventType</con:name>
              <con:value>eventType</con:value>
            </con:property>
            <con:property>
              <con:name>channelType</con:name>
              <con:value>inbrowser</con:value>
            </con:property>
            <con:property>
              <con:name>locale</con:name>
              <con:value>EN-US</con:value>
            </con:property>
            <con:property>
              <con:name>contactName</con:name>
              <con:value>22dionysus@pearson.com</con:value>
            </con:property>
            <con:property>
              <con:name>message</con:name>
              <con:value>EN-US message</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>Success</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>ID</con:name>
              <con:value>TC_valid_all</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="2231a94b-9ad3-414f-87f6-dc10f612930c">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="Contains">
              <con:configuration>
                <token>201</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiNjE0MDdlNzAyYTZkNGQwY2JjMjE5N2E4YjA0YTRhMmQiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.kiWO8IPG06xt2IsbCIRSqtqE7KJkV4LxfuobvawXeqeA3r-Ulgo6CUwRgQo5qLZdbqkIQjC9IKtJ-jaCCU7cdenxNodXJDHCgThiZC1rPMS8Ri21kZSi4RzCZxobMGRTz4hPRHgR-Li-IhYyvOmiZ21kVTQr-4IojanMvRRv6-g" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>x-Authorization</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TemplateIdTransfer 1" id="f3831bb9-cc0e-475a-b108-df6ba694e64a">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>DeleteTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="f297771e-6cb1-405d-ba39-3a859be3a360">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request/>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion">
              <con:configuration>
                <token>204</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="527a2a67-60ac-46f0-9862-d04a47a9a4da" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Loop" id="78b11618-dadb-4761-b465-726196eb7e99" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="b5634d8b-61e4-4d1f-851d-cecfcff301e6" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeleteTemplatebyaltid_invalid_TemplateId" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="fcbcaee6-8d2a-4796-bf85-5af0874b2520">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request/>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion">
              <con:configuration>
                <token>404</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="invalid" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="fb12387c-17b1-4f2b-9af0-f11fd06924da" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeleteTemplatebyaltid_null_TemplateId" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="7b6be725-49cc-4f85-840b-a28ff1a8d7a6">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request/>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion">
              <con:configuration>
                <token>405</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="11d895e3-380d-458a-a63e-c6d322c3c9a2" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="DeleteTemplatebyaltid_specialChar_TemplateId" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="220f1e84-9ff6-462d-b5dd-aeaedfe7366f">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request/>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion">
              <con:configuration>
                <token>404</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="&amp;amp;*" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="568bc08c-dbda-4d44-a745-0fae95bf55eb" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UpdateTemplate_all_valid" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="properties" name="Properties" id="da7f1bf9-b7e1-4aa3-afa9-ecc746ec5f04">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>productType</con:name>
              <con:value>Template_regress77745560000000000</con:value>
            </con:property>
            <con:property>
              <con:name>appType</con:name>
              <con:value>appType</con:value>
            </con:property>
            <con:property>
              <con:name>eventType</con:name>
              <con:value>eventType</con:value>
            </con:property>
            <con:property>
              <con:name>channelType</con:name>
              <con:value>inbrowser</con:value>
            </con:property>
            <con:property>
              <con:name>locale</con:name>
              <con:value>EN-US</con:value>
            </con:property>
            <con:property>
              <con:name>contactName</con:name>
              <con:value>22dionysus@pearson.com</con:value>
            </con:property>
            <con:property>
              <con:name>message</con:name>
              <con:value>EN-US message</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>Success</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>ID</con:name>
              <con:value>TC_valid_all</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="ReadExcel" id="3a53a97c-86a0-4c0c-80a8-5d64baf28ac9">
        <con:settings/>
        <con:config>
          <script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="63574ba6-f8fa-476f-af09-e816bceac899">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="StatusAssertion">
              <con:configuration>
                <token>201</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiZTFiY2VlOGY5YTM3NDY5YmJhMjA2OGFhNWViZGU5MTYiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.PYGd66XG4UMHz6Hl5Nt5VCvyIDIWrlTePD8x9I36jsiNcRJbx-vDrFcynXRQ4sgoyu9ZBcJhb14sBR_FfCsKp74yhhhZG165hm5IJ4E8yUC1kVX0ZjbDQZse5fGmLdPb7m4PnLJ3DtYO5CajcC5vYUgYjoxtQmQ9TMo65PbrtyA" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>x-Authorization</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TemplateIdTransfer" id="fb6dafe4-e54c-4784-9bb5-c9ca0aa64bc6">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>GetTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="GetTemplate - Request 1" id="2d0f6861-cc06-45a9-b4ff-7d261e847f15">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains">
              <con:configuration>
                <token>200</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="30617cd4-9f64-4bbb-8b07-fe7a2df1f1ef" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TokenIdTransfer2" id="3973df16-3aa1-4405-aa79-9eacc107f442">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>UpdateTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="UpdateTemplate - Request 1" id="102df725-5231-4805-8d38-81a938ca7b09">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="UpdateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="UpdateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}_${Properties#productType}",
   "contactName": "${Properties#contactName}_${Properties#productType}",
   "payload": { 
   	"message": "${Properties#message}_${Properties#productType}" ,
   	"subject": "A topic was created",
     "body": "Hi $eventModel.firstName"
   	
   	}
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="638f2e87-accf-4f75-a9d9-aea719b3c8a9" name="StatusAssertion">
              <con:configuration>
                <token>200</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'UPDATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'UPDATE TEMPLATE FAILED :XPath contains updatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.contactName == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.payload.message == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains payload comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'UPDATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailSubjectAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject != null,'UPDATE TEMPLATE FAILED :XPath contains subject comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailBodyAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body != null,'UPDATE TEMPLATE FAILED :XPath contains body comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="30617cd4-9f64-4bbb-8b07-fe7a2df1f1ef" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="productTypeTransfer" id="ff0285bb-3b5a-4dbe-8044-4d6d1e7f128c">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.productType</con:sourcePath>
            <con:targetType>productType</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="appTypeTransfer" id="d1d23f53-7113-4ef2-b9d0-53ba13dbdca5">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.appType</con:sourcePath>
            <con:targetType>appType</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="ChannelTransfer" id="42904bf0-812f-482d-ba48-108292c9ba39">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.channelType</con:sourcePath>
            <con:targetType>channel</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="EventTransfer" id="3946935f-780f-43a7-923c-3cc126ca9a3f">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.eventType</con:sourcePath>
            <con:targetType>eventType</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="localeTransfer" id="d662142f-74a3-4798-9c93-35413a9659fd">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.template.locale</con:sourcePath>
            <con:targetType>locale</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="GetTemplate_altid" id="606fc492-6a37-44de-89e3-10fad431df18">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains">
              <con:configuration>
                <token>200</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="locale" value="EN-US_Template_regress77745560000000000"/>
              <con:entry key="eventType" value="eventType"/>
              <con:entry key="appType" value="appType"/>
              <con:entry key="channel" value="inbrowser"/>
              <con:entry key="productType" value="Template_regress77745560000000000"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>productType</con:entry>
              <con:entry>appType</con:entry>
              <con:entry>eventType</con:entry>
              <con:entry>channel</con:entry>
              <con:entry>locale</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TemplateIdTransfer 1" id="a3dcb47b-3642-4a6a-8b3a-ae137ca7b18f">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>DeleteTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="6a75c97d-fb7b-4b59-9beb-c7ce7a10cf0a">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request/>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion">
              <con:configuration>
                <token>204</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="30617cd4-9f64-4bbb-8b07-fe7a2df1f1ef" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Loop" id="1a201495-3696-4e0f-9b46-5276d0ce2694" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="8054c8c7-b966-4aaa-86b5-8cc7968521b6" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UpdateTemplate_SpecialChar_ContactName" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="properties" name="Properties" id="90354a3a-f588-4f38-b301-98849a2e747d">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>productType</con:name>
              <con:value>Template_regress77745560000000000</con:value>
            </con:property>
            <con:property>
              <con:name>appType</con:name>
              <con:value>appType</con:value>
            </con:property>
            <con:property>
              <con:name>eventType</con:name>
              <con:value>eventType</con:value>
            </con:property>
            <con:property>
              <con:name>channelType</con:name>
              <con:value>inbrowser</con:value>
            </con:property>
            <con:property>
              <con:name>locale</con:name>
              <con:value>EN-US</con:value>
            </con:property>
            <con:property>
              <con:name>contactName</con:name>
              <con:value>22dionysus@pearson.com</con:value>
            </con:property>
            <con:property>
              <con:name>message</con:name>
              <con:value>EN-US message</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>Success</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>ID</con:name>
              <con:value>TC_valid_all</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="ReadExcel" id="1861d44b-ff7e-4966-a02b-cfade9048232">
        <con:settings/>
        <con:config>
          <script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "PNS_GenerateToken";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="PNS_GenerateToken - TC_valid_all" id="944fd39e-6dfb-4f5d-a2a1-958cb25ada78">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#generateTokenEnd}" methodName="GenerateToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="PNS_GenerateToken - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#PNSURL}</con:endpoint>
            <con:request>{ "userName":"globallogic_system", "password":"fHdM0m9zPFIceKZ1GPhy7Qqq1mg0sJ69"}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="8553f5bd-bea8-4989-820b-75232e18b569" name="PNSTokenSuccessAssertion">
              <con:configuration>
                <token>success</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TokenIdTransfer" id="6bda3737-2b8e-4902-828e-6caa1375124d">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>PNS_GenerateToken - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data</con:sourcePath>
            <con:targetType>x-Authorization</con:targetType>
            <con:targetStep>CreateTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="CreateTemplate - Request 1" id="e311cd4e-dd1f-4260-811a-4aef98bd6a74">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="CreateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="StatusAssertion">
              <con:configuration>
                <token>201</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTM4ODA0MjEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiZmI3MWU4OTNlOWZjNDc1OWJiNjgwZjBhNzI0YzM2ZjIiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5Mzg2OTYyMX0.dRvm0BoQ2fiR855bUvB9zHP7Gj90rkih4BFPXrE6s--KYKy5hVdw-5p-dmsLDvxjwVcmoKpJZjOY5YJ3PG4nGYxLucENnAYaK1pEzDZc2aAS8PG-CMtWvYvoea_JahMDxkO2s3mhBgWUO-4Uw04XoqGO7ij_RzQGJq2VjP2qAgg" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>x-Authorization</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TemplateIdTransfer" id="b0ab8f5d-42c3-4bc5-be4c-71be9a5190cf">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>CreateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>GetTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="GetTemplate - Request 1" id="572165d1-803d-46af-bbf9-8f86f217c554">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains">
              <con:configuration>
                <token>200</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="1116bff3-a435-4c1c-b51a-c65638eb94d5" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TokenIdTransfer2" id="15b001d8-469b-46ac-bd94-6594baf432ff">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>CreateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>UpdateTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="UpdateTemplate - Request 1" id="6e531e5d-ee4f-47dd-bb5d-7eea6e707fce">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="UpdateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="UpdateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}_${Properties#productType}",
   "contactName": "${Properties#contactName}_${Properties#productType}###",
   "payload": { 
   	"message": "${Properties#message}_${Properties#productType}" ,
 
"subject": "A topic was created",
      "body": "Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic."
    }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="638f2e87-accf-4f75-a9d9-aea719b3c8a9" name="StatusAssertion">
              <con:configuration>
                <token>200</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'UPDATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'UPDATE TEMPLATE FAILED :XPath contains updatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')+'###'

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.contactName == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.payload.message == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains payload comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'UPDATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailSubjectAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject != null,'UPDATE TEMPLATE FAILED :XPath contains subject comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailBodyAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body != null,'UPDATE TEMPLATE FAILED :XPath contains body comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="1116bff3-a435-4c1c-b51a-c65638eb94d5" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="productTypeTransfer" id="09089372-23b7-4707-abfc-91f41f4df478">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.productType</con:sourcePath>
            <con:targetType>productType</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="appTypeTransfer" id="3194541e-be3f-4c35-9d7a-a3329e7063c8">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.appType</con:sourcePath>
            <con:targetType>appType</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="ChannelTransfer" id="8f7a90d9-9c77-4533-945e-0ab0e99d6c51">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.channelType</con:sourcePath>
            <con:targetType>channel</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="EventTransfer" id="a7d596fc-b681-4266-a256-d819fba25623">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.eventType</con:sourcePath>
            <con:targetType>eventType</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="localeTransfer" id="1dcef09d-09d1-4734-84fe-98062534840f">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.template.locale</con:sourcePath>
            <con:targetType>locale</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="GetTemplate_altid" id="118e6942-107a-4048-86c4-adc24663adfa">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}'+'###')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains">
              <con:configuration>
                <token>200</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="locale" value="EN-US_Template_regress77745560000000000"/>
              <con:entry key="eventType" value="eventType"/>
              <con:entry key="appType" value="appType"/>
              <con:entry key="channel" value="inbrowser"/>
              <con:entry key="productType" value="Template_regress77745560000000000"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>productType</con:entry>
              <con:entry>appType</con:entry>
              <con:entry>eventType</con:entry>
              <con:entry>channel</con:entry>
              <con:entry>locale</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TemplateIdTransfer 1" id="2adfd3b5-dbb0-4890-802d-26b25c481894">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>DeleteTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="8ecc1b80-e478-408a-be93-74635c38a53e">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request/>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion">
              <con:configuration>
                <token>204</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="1116bff3-a435-4c1c-b51a-c65638eb94d5" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Loop" id="f2b4614e-83bb-42ad-97b5-bffd55d91bec" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="c55aad06-5fec-42d9-8496-993f6e01ca20" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UpdateTemplate_SpecialChar_MessageName" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="properties" name="Properties" id="bda01a44-35de-49a0-8049-0782ffd8270d">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>productType</con:name>
              <con:value>Template_regress77745560000000000</con:value>
            </con:property>
            <con:property>
              <con:name>appType</con:name>
              <con:value>appType</con:value>
            </con:property>
            <con:property>
              <con:name>eventType</con:name>
              <con:value>eventType</con:value>
            </con:property>
            <con:property>
              <con:name>channelType</con:name>
              <con:value>inbrowser</con:value>
            </con:property>
            <con:property>
              <con:name>locale</con:name>
              <con:value>EN-US</con:value>
            </con:property>
            <con:property>
              <con:name>contactName</con:name>
              <con:value>22dionysus@pearson.com</con:value>
            </con:property>
            <con:property>
              <con:name>message</con:name>
              <con:value>EN-US message</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>Success</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>ID</con:name>
              <con:value>TC_valid_all</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="ReadExcel" id="3739786c-7648-4461-ad46-c1c7426904e6">
        <con:settings/>
        <con:config>
          <script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "PNS_GenerateToken";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="PNS_GenerateToken - TC_valid_all" id="ac60024d-12d2-4440-b29b-c61e35f05f64">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#generateTokenEnd}" methodName="GenerateToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="PNS_GenerateToken - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#PNSURL}</con:endpoint>
            <con:request>{ "userName":"globallogic_system", "password":"fHdM0m9zPFIceKZ1GPhy7Qqq1mg0sJ69"}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="8553f5bd-bea8-4989-820b-75232e18b569" name="PNSTokenSuccessAssertion">
              <con:configuration>
                <token>success</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TokenIdTransfer" id="f67b4bc6-d961-4eed-aa35-650a43d62cca">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>PNS_GenerateToken - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data</con:sourcePath>
            <con:targetType>x-Authorization</con:targetType>
            <con:targetStep>CreateTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="CreateTemplate - Request 1" id="7d24dba2-b667-498a-a6b8-3ba3ce02bc26">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="CreateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="StatusAssertion">
              <con:configuration>
                <token>201</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTM4ODA0MjksInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiNDRiMTdjYjlhZTk1NDg3MWE4MDNlZTdlMjIzOTBiYmIiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5Mzg2OTYyOH0.I_pu52uN4ZnJ2vQLT3L2_XHjydW7fC2s9-FvYgpYicdfBr5CF7ubTSVnsElumeTcnsYG1VAAJUvV3j0a54ivHUFjEiNeJKzjluIQ2p3LP8LKEY0JDevkGK92jc0UGP0-qpWa-MZsUAgYd1Gxd3bFqK63F6rahO0H1c0B5HAxm8M" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>x-Authorization</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TemplateIdTransfer" id="e57faa26-c040-439f-8dbb-f771e4b146b0">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>CreateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>GetTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="GetTemplate - Request 1" id="30cf688b-e7ee-420f-914d-07e1205d1047">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains">
              <con:configuration>
                <token>200</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="4a7bd452-b9d4-48fe-aa32-f0f52e576153" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TokenIdTransfer2" id="f8d1fcf8-b077-45f0-ae13-ed38330be545">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>CreateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>UpdateTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="UpdateTemplate - Request 1" id="a7d9ad44-fd90-480f-80a6-bf0a151d582e">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="UpdateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="UpdateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}_${Properties#productType}",
   "contactName": "${Properties#contactName}_${Properties#productType}",
   "payload": { 
   	"message": "${Properties#message}_${Properties#productType}#$%$#" ,
 
"subject": "A topic was created",
      "body": "Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic."
    }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="638f2e87-accf-4f75-a9d9-aea719b3c8a9" name="StatusAssertion">
              <con:configuration>
                <token>200</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'UPDATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'UPDATE TEMPLATE FAILED :XPath contains updatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}_')+context.expand('${Properties#productType}')+'#$%$#'

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.payload.message == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}_')+context.expand('${Properties#productType}')+'#$%$#'

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.payload.message == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains payload comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'UPDATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailSubjectAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject != null,'UPDATE TEMPLATE FAILED :XPath contains subject comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailBodyAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body != null,'UPDATE TEMPLATE FAILED :XPath contains body comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="4a7bd452-b9d4-48fe-aa32-f0f52e576153" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="productTypeTransfer" id="e9e1c434-5f10-4631-b169-8b5f2fbf0a73">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.productType</con:sourcePath>
            <con:targetType>productType</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="appTypeTransfer" id="bce1ce80-5713-4e03-b748-293f7c7ac3f8">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.appType</con:sourcePath>
            <con:targetType>appType</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="ChannelTransfer" id="bcbd4e03-d496-4c89-a098-137ec391fb76">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.channelType</con:sourcePath>
            <con:targetType>channel</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="EventTransfer" id="597ffa1b-0e23-42ea-a195-92a67486a2a8">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.eventType</con:sourcePath>
            <con:targetType>eventType</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="localeTransfer" id="a569af00-68e6-4e22-bf2f-340d582c9418">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.template.locale</con:sourcePath>
            <con:targetType>locale</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="GetTemplate_altid" id="6dfdc7a1-906d-4669-847d-9d30dcee4030">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}_')+context.expand('${Properties#productType}'+'#$%$#')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains">
              <con:configuration>
                <token>200</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="locale" value="EN-US_Template_regress77745560000000000"/>
              <con:entry key="eventType" value="eventType"/>
              <con:entry key="appType" value="appType"/>
              <con:entry key="channel" value="inbrowser"/>
              <con:entry key="productType" value="Template_regress77745560000000000"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>productType</con:entry>
              <con:entry>appType</con:entry>
              <con:entry>eventType</con:entry>
              <con:entry>channel</con:entry>
              <con:entry>locale</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TemplateIdTransfer 1" id="b0a38aaa-1593-4ac8-83e1-da2709df97dc">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>DeleteTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="172455af-c814-43ca-95e7-165051091675">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request/>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion">
              <con:configuration>
                <token>204</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="4a7bd452-b9d4-48fe-aa32-f0f52e576153" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Loop" id="29382414-5a1d-42b6-a781-21f4f6e94504" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="0aa1c6f9-1c04-48a4-b887-c24150752495" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UpdateTemplate_inbrowserToEmail" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="properties" name="Properties" id="072e1ff0-e9a8-4e10-8a46-84fca50a733a">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>productType</con:name>
              <con:value>Template_regress77745560000000000</con:value>
            </con:property>
            <con:property>
              <con:name>appType</con:name>
              <con:value>appType</con:value>
            </con:property>
            <con:property>
              <con:name>eventType</con:name>
              <con:value>eventType</con:value>
            </con:property>
            <con:property>
              <con:name>channelType</con:name>
              <con:value>inbrowser</con:value>
            </con:property>
            <con:property>
              <con:name>locale</con:name>
              <con:value>EN-US</con:value>
            </con:property>
            <con:property>
              <con:name>contactName</con:name>
              <con:value>22dionysus@pearson.com</con:value>
            </con:property>
            <con:property>
              <con:name>message</con:name>
              <con:value>EN-US message</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>Success</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>ID</con:name>
              <con:value>TC_valid_all</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="ReadExcel" id="4f98500c-45c9-48b0-ad52-6f4b74eb8e8c">
        <con:settings/>
        <con:config>
          <script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "Create_Template";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="Create_Template - TC_valid_all" id="c857de8f-03ce-4a1a-aca5-f1a9600b9bf3">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="Create_Template - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="StatusAssertion">
              <con:configuration>
                <token>201</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTMwMzc2ODEsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiOGQ1Nzg1N2YzODEzNDcyZmE0NDhmNjBjOTQwM2RkNmYiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MzAyNjg4MH0.mAa-Lg-JghAHhseoyvJ5Mxu8KNZ4io571aK8Ys7pj9VoWx3Wvd7d2paOqdLQnHa6F-4Pfv-BNlpSPTl2i62BcLR91WInjsGCCNjq2qKJL2QpgyhV40K-wYE2GzMAK_F-7F7j0LOQCsnW1_Zq1f1GSLwp1dHe3tAL4MkcciC2F2s" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>x-Authorization</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TemplateIdTransfer" id="8f5b9631-9327-4cb5-b38b-70cb32990c54">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>GetTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="GetTemplate - Request 1" id="b7fa9a6f-30fd-4e5c-8c25-07e25cb4ec7e">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains">
              <con:configuration>
                <token>200</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="ab588767-bc88-486c-b39a-044c1dc0c675" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TokenIdTransfer2" id="203ec945-9977-49dd-a1da-adb180342013">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>Create_Template - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>UpdateTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="UpdateTemplate - Request 1" id="424aac3c-30e6-4b70-a7db-79ca94fefe98">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="UpdateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="UpdateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "email",
 "template": {
   "locale": "${Properties#locale}_${Properties#productType}",
   "contactName": "${Properties#contactName}_${Properties#productType}",
   "payload": { 
   	"message": "${Properties#message}_${Properties#productType}", 
"subject": "A topic was created",
      "body": "Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic."
    }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="638f2e87-accf-4f75-a9d9-aea719b3c8a9" name="StatusAssertion">
              <con:configuration>
                <token>200</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 'email'


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'UPDATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'UPDATE TEMPLATE FAILED :XPath contains updatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.contactName == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.payload.message == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains payload comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'UPDATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailSubjectAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject != null,'UPDATE TEMPLATE FAILED :XPath contains subject comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailBodyAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body != null,'UPDATE TEMPLATE FAILED :XPath contains body comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="ab588767-bc88-486c-b39a-044c1dc0c675" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="productTypeTransfer" id="32ddcd16-83de-4fca-be8f-284124e79b41">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.productType</con:sourcePath>
            <con:targetType>productType</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="appTypeTransfer" id="32a631a8-23d5-4bee-b07b-a4710c672e67">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.appType</con:sourcePath>
            <con:targetType>appType</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="ChannelTransfer" id="7cea151e-e710-477d-8932-ff4c4ac0095a">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.channelType</con:sourcePath>
            <con:targetType>channel</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="EventTransfer" id="255a319d-29af-419b-a459-e67ae9044695">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.eventType</con:sourcePath>
            <con:targetType>eventType</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="localeTransfer" id="367f2e76-9d8c-4178-ae03-b2509720a0da">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.template.locale</con:sourcePath>
            <con:targetType>locale</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="GetTemplate_altid" id="88d22143-a5ba-45c5-b4b7-e594481fb4f3">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = 'email'
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains">
              <con:configuration>
                <token>200</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="locale" value="EN-US_Template_regress77745560000000000"/>
              <con:entry key="eventType" value="eventType"/>
              <con:entry key="appType" value="appType"/>
              <con:entry key="channel" value="email"/>
              <con:entry key="productType" value="Template_regress77745560000000000"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>productType</con:entry>
              <con:entry>appType</con:entry>
              <con:entry>eventType</con:entry>
              <con:entry>channel</con:entry>
              <con:entry>locale</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TemplateIdTransfer 1" id="dbb4811f-83ac-4dba-9780-b6e69cb63647">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>DeleteTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="fe9f036c-1344-4f81-a528-32e3156ff597">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request/>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion">
              <con:configuration>
                <token>204</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="ab588767-bc88-486c-b39a-044c1dc0c675" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Loop" id="cc3ed0c0-0571-451a-9257-69287fde0cbc" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="df2c6e1e-1d59-4a8d-b108-d07659458c20" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UpdateTemplate_null_MessageName" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="properties" name="Properties" id="b73dc275-9622-4711-87fd-25a92c308a5c">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>productType</con:name>
              <con:value>Template_regress77745560000000000</con:value>
            </con:property>
            <con:property>
              <con:name>appType</con:name>
              <con:value>appType</con:value>
            </con:property>
            <con:property>
              <con:name>eventType</con:name>
              <con:value>eventType</con:value>
            </con:property>
            <con:property>
              <con:name>channelType</con:name>
              <con:value>inbrowser</con:value>
            </con:property>
            <con:property>
              <con:name>locale</con:name>
              <con:value>EN-US</con:value>
            </con:property>
            <con:property>
              <con:name>contactName</con:name>
              <con:value>22dionysus@pearson.com</con:value>
            </con:property>
            <con:property>
              <con:name>message</con:name>
              <con:value>EN-US message</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>Success</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>ID</con:name>
              <con:value>TC_valid_all</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="ReadExcel" id="13bbeabb-0f64-43ca-9f4a-47655d2f078f">
        <con:settings/>
        <con:config>
          <script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "PNS_GenerateToken";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="PNS_GenerateToken - TC_valid_all" id="2b5eb1b5-74fd-47ac-b124-604ef7ae3204" disabled="true">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#generateTokenEnd}" methodName="GenerateToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="PNS_GenerateToken - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#PNSURL}</con:endpoint>
            <con:request>{ "userName":"globallogic_system", "password":"fHdM0m9zPFIceKZ1GPhy7Qqq1mg0sJ69"}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="8553f5bd-bea8-4989-820b-75232e18b569" name="PNSTokenSuccessAssertion">
              <con:configuration>
                <token>success</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TokenIdTransfer" id="59c30994-10c2-421c-8962-29ee8121340f" disabled="true">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>PNS_GenerateToken - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data</con:sourcePath>
            <con:targetType>x-Authorization</con:targetType>
            <con:targetStep>CreateTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="CreateTemplate - Request 1" id="a1750136-c3da-48f1-9146-dbd4dec22e90">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="CreateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="StatusAssertion">
              <con:configuration>
                <token>201</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTI2ODAxMzcsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiYmIyMTNlZWVmNTA2NDhlMzkwMDk3ZDdkMTg2OWI4MWYiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5MjY2OTMzNn0.Oeu67jg4chcNITaCQGBVCUB5plDEDW9tR11C5nk8qtQgoP1q0x51056bwwR8lCP-FeMFErF4elmHvfZcTyd9QsA_bJfduzdd6a5rG2QIJvWVNqFVK7DJx2PiO9vAEkSgtLMmLA1Cw2Y_JM2M0WES_UvyGwbXEwI5NFQ4zK8_yPc" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>x-Authorization</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TemplateIdTransfer" id="5ccabed6-85ef-4122-baea-0cb215427c98">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>CreateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>GetTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="GetTemplate - Request 1" id="9f3dfc42-a050-4499-85be-9909365ec80b">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains">
              <con:configuration>
                <token>200</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="3e0df6e2-de9f-400f-8696-1eebf77ba625" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TokenIdTransfer2" id="62e43fee-bcba-4adf-af56-2756090e57ae">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>CreateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>UpdateTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="UpdateTemplate - Request 1" id="d36b1e07-9619-45a1-87f7-fab706c42d3d">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="UpdateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="UpdateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}_${Properties#productType}",
   "contactName": "${Properties#contactName}_${Properties#productType}",
   "payload": { 
   	"message": " ", 
 
"subject": "A topic was created",
      "body": "Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic."
    }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="638f2e87-accf-4f75-a9d9-aea719b3c8a9" name="StatusAssertion">
              <con:configuration>
                <token>200</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'UPDATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'UPDATE TEMPLATE FAILED :XPath contains updatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}'+'###')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message !=null,'UPDATE TEMPLATE FAILED :XPath contains message comparison Failed,Field is not blank in response.'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'UPDATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailSubjectAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject != null,'UPDATE TEMPLATE FAILED :XPath contains subject comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailBodyAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body != null,'UPDATE TEMPLATE FAILED :XPath contains body comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="3e0df6e2-de9f-400f-8696-1eebf77ba625" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="productTypeTransfer" id="1cc00ce3-bfb3-4cbb-aee4-777cd98d50ba">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.productType</con:sourcePath>
            <con:targetType>productType</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="appTypeTransfer" id="f85bf9bf-6c38-4dd8-9fd7-dc5e34fe5332">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.appType</con:sourcePath>
            <con:targetType>appType</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="ChannelTransfer" id="4403aacd-6beb-4dd3-889d-369fe786a3ea">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.channelType</con:sourcePath>
            <con:targetType>channel</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="EventTransfer" id="dea50fa7-d407-4d31-8042-75fad2a79152">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.eventType</con:sourcePath>
            <con:targetType>eventType</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="localeTransfer" id="b135c5ca-e53a-4288-b015-f831e9ee66bd">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.template.locale</con:sourcePath>
            <con:targetType>locale</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="GetTemplate_altid" id="20474303-eb48-46f8-a16f-1c3f227845e0">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}'+'###')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message !=null,'Get TEMPLATE FAILED :XPath contains message comparison Failed,Field is not blank in response.'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CloneNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains">
              <con:configuration>
                <token>200</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="locale" value="EN-US_Template_regress77745560000000000"/>
              <con:entry key="eventType" value="eventType"/>
              <con:entry key="appType" value="appType"/>
              <con:entry key="channel" value="inbrowser"/>
              <con:entry key="productType" value="Template_regress77745560000000000"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>productType</con:entry>
              <con:entry>appType</con:entry>
              <con:entry>eventType</con:entry>
              <con:entry>channel</con:entry>
              <con:entry>locale</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TemplateIdTransfer 1" id="c978af2d-adca-4a4c-9d27-b6a447367b39">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>DeleteTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="c48d5d73-4a30-4c3e-957e-f168a378f572">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request/>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion">
              <con:configuration>
                <token>204</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="3e0df6e2-de9f-400f-8696-1eebf77ba625" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Loop" id="3e912a65-f084-4c24-bd75-beb6a4bdf0c4" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:testCase id="b0cbd7db-8520-4eaf-86a5-e24581bb565c" failOnError="false" failTestCaseOnErrors="true" keepSession="false" maxResults="0" name="UpdateTemplate_null_ContactName" searchProperties="true" timeout="0" wsrmEnabled="false" wsrmVersion="1.0" wsrmAckTo="" amfAuthorisation="false" amfEndpoint="" amfLogin="" amfPassword="" discardOkResults="false">
      <con:description>TestCase generated for REST Resource [Register] located at [/event/register]</con:description>
      <con:settings/>
      <con:testStep type="properties" name="Properties" id="3660a52a-bb82-4931-9947-ed0822336f76">
        <con:settings/>
        <con:config xsi:type="con:PropertiesStep" saveFirst="true" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:properties>
            <con:property>
              <con:name>count</con:name>
              <con:value>1</con:value>
            </con:property>
            <con:property>
              <con:name>Total</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>productType</con:name>
              <con:value>Template_regress77745560000000000</con:value>
            </con:property>
            <con:property>
              <con:name>appType</con:name>
              <con:value>appType</con:value>
            </con:property>
            <con:property>
              <con:name>eventType</con:name>
              <con:value>eventType</con:value>
            </con:property>
            <con:property>
              <con:name>channelType</con:name>
              <con:value>inbrowser</con:value>
            </con:property>
            <con:property>
              <con:name>locale</con:name>
              <con:value>EN-US</con:value>
            </con:property>
            <con:property>
              <con:name>contactName</con:name>
              <con:value>22dionysus@pearson.com</con:value>
            </con:property>
            <con:property>
              <con:name>message</con:name>
              <con:value>EN-US message</con:value>
            </con:property>
            <con:property>
              <con:name>status</con:name>
              <con:value>Success</con:value>
            </con:property>
            <con:property>
              <con:name>Next</con:name>
              <con:value>2</con:value>
            </con:property>
            <con:property>
              <con:name>StopLoop</con:name>
              <con:value>T</con:value>
            </con:property>
            <con:property>
              <con:name>ID</con:name>
              <con:value>TC_valid_all</con:value>
            </con:property>
          </con:properties>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="ReadExcel" id="f47ce14e-f936-434c-be85-52f87c75ced1">
        <con:settings/>
        <con:config>
          <script>import Utilities.*;
 
def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def myTestCase = context.testCase
def projectDir = groovyUtils.projectPath
myvar = context.expand('${#Project#NS_Workbook_Path}')
def path = projectDir +'\\'+ myvar
def Sname = context.expand('${#Project#NS_Template_Sheet}')
log.info path
log.info "Reading Input test files..."
log.info Sname

Object[][] ObjAr = ExcelUtils.getTableArray(path,Sname)
//============================================================= 
def rows = ExcelUtils.getRows()
def column = ExcelUtils.getColumns()
 
log.info rows
log.info column
 
//================================
def size = ObjAr.size().toInteger()
log.info "size:"+size
 
propTestStep = myTestCase.getTestStepByName("Properties")
propTestStep.setPropertyValue("Total", size.toString())
 
counter = propTestStep.getPropertyValue("Count").toString()
counter = counter.toInteger()
//next =(counter > size-2? 0: counter+1)--- for loop
next = size-1
 
propTestStep.setPropertyValue("Count", next.toString())
 
tempValue = ObjAr[counter]
log.info "DDDDD"+tempValue
propTestStep.setPropertyValue("ID", tempValue[0])
propTestStep.setPropertyValue("productType", tempValue[1])
propTestStep.setPropertyValue("appType", tempValue[2])
 
propTestStep.setPropertyValue("eventType", tempValue[3])
propTestStep.setPropertyValue("channelType", tempValue[4])
propTestStep.setPropertyValue("locale", tempValue[5])
propTestStep.setPropertyValue("contactName", tempValue[6])
propTestStep.setPropertyValue("message", tempValue[7])
propTestStep.setPropertyValue("status", tempValue[8])
next++

log.info "Reading line : ${(counter+1)} / $size"
propTestStep.setPropertyValue("Next", next.toString())
log.info "Value '$tempValue' -- updated in $propTestStep.name"


//Renaming Test Request on the go
def reqTestStep = testRunner.testCase.getTestStepAt(2);
def reqTestStepName = "PNS_GenerateToken";
tempTestStepName = reqTestStepName + " - " + tempValue[0];
testRunner.testCase.getTestStepAt(2).setName(tempTestStepName);

if (counter == size-1)
{
propTestStep.setPropertyValue("StopLoop", "T")
log.info "Setting the stoploop property now..."
}
else if (counter==0)
{
def runner = new com.eviware.soapui.impl.wsdl.testcase.WsdlTestCaseRunner(testRunner.testCase, null)
propTestStep.setPropertyValue("StopLoop", "F")
}
else
{
propTestStep.setPropertyValue("StopLoop", "F")
}</script>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="PNS_GenerateToken - TC_valid_all" id="84958cb3-2948-449a-9f25-c59593538db0">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#generateTokenEnd}" methodName="GenerateToken" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="PNS_GenerateToken - TC_valid_all" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#PNSURL}</con:endpoint>
            <con:request>{ "userName":"globallogic_system", "password":"fHdM0m9zPFIceKZ1GPhy7Qqq1mg0sJ69"}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="8553f5bd-bea8-4989-820b-75232e18b569" name="PNSTokenSuccessAssertion">
              <con:configuration>
                <token>success</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters/>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TokenIdTransfer" id="153fccbc-e8e9-40cf-89eb-6fa96d477fb5">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>PNS_GenerateToken - TC_valid_all</con:sourceStep>
            <con:sourcePath>$.data</con:sourcePath>
            <con:targetType>x-Authorization</con:targetType>
            <con:targetStep>CreateTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="CreateTemplate - Request 1" id="34acb003-44e0-4a2f-a517-2d66a3c5452b">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}" methodName="CreateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="CreateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;entry key="Content-Type" value="application/json" xmlns="http://eviware.com/soapui/config"/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}",
   "contactName": "${Properties#contactName}",
   "payload": { "message": "${Properties#message}" }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="93c7a9a6-51c1-4f6a-9044-c39407979bf7" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="2783fd75-6151-494b-a8a4-bfcb7d3625ef" name="StatusAssertion">
              <con:configuration>
                <token>201</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="x-Authorization" value="eyJhbGciOiJSUzUxMiIsImtpZCI6ImsxNjMzNDczODYwIn0.eyJleHAiOjE0OTM4ODA0NTMsInN1YiI6ImZmZmZmZmZmNTg2NTQ1ZjZlNGIwMmI5YThkOWVmMGQ5Iiwic2Vzc2lkIjoiNjM0YmVjNDcxNzRhNGMxOGIwYWU5NzQ4ZjFmNmFjYmQiLCJoY2MiOiJVUyIsInR5cGUiOiJhdCIsImlhdCI6MTQ5Mzg2OTY1M30.LAMHb1XYn74sn1gmbjB0PtORdyI-3idmiF1Q53wDAmn5AO_9WM6RBnM1Gzyi4OY5XjBD9xxyHRbAUtH9HgF8sc5Srt_OQRrw8-Z-Z6CcbE692bCjxh8SXYFYkG_GUcOPcm1rE-ic_dKav0QRYOXUYGkvtzflVXuOUG8U-cS7F8c" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>x-Authorization</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TemplateIdTransfer" id="5a203878-dd37-4868-a996-7c3fc44ad9aa">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>CreateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>GetTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="GetTemplate - Request 1" id="84a0319e-cc46-44ee-99b8-8e153071e550">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#contactName}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName == expectedValue,'CREATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.contactName+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="be6db7af-56a0-4251-b195-af67b4d566b9" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'CREATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="c0250aff-675a-40ac-ac4c-d1cdd93bed00" name="Contains">
              <con:configuration>
                <token>200</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="6115bf10-b30b-40e7-96bf-dd1cad709f50" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TokenIdTransfer2" id="1909256a-4ae8-40fc-ab4c-bd6787fbe24d">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>CreateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>UpdateTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="UpdateTemplate - Request 1" id="f53964a9-c8da-4b36-989a-69646df21d2e">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="UpdateTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="UpdateTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
 "productType": "${Properties#productType}",
 "appType": "${Properties#appType}",
 "eventType": "${Properties#eventType}",
 "channelType": "${Properties#channelType}",
 "template": {
   "locale": "${Properties#locale}_${Properties#productType}",
   "contactName": " ",
   "payload": { 
   	"message": "${Properties#message}_${Properties#productType}", 
 
"subject": "A topic was created",
      "body": "Hi $eventModel.firstName,&lt;br />&lt;br />$eventModel.instructorName has created a topic called $eventModel.topic.name. Please &lt;a href=$eventModel.topic.link>click here&lt;/a> to view the new topic."
    }
 }
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="638f2e87-accf-4f75-a9d9-aea719b3c8a9" name="StatusAssertion">
              <con:configuration>
                <token>200</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')


def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'UPDATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'UPDATE TEMPLATE FAILED :XPath contains updatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*


//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.contactName != null,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting null'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}_')+context.expand('${Properties#productType}')

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)
assert jsonSlurper.data.template.payload.message == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains payload comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'UPDATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailSubjectAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.subject != null,'UPDATE TEMPLATE FAILED :XPath contains subject comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="c1c13c8e-9a0b-4eed-9103-44b27d531227" name="EmailBodyAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.body != null,'UPDATE TEMPLATE FAILED :XPath contains body comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="6115bf10-b30b-40e7-96bf-dd1cad709f50" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="productTypeTransfer" id="68c4f77f-d802-4804-8373-a668ae482a2b">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.productType</con:sourcePath>
            <con:targetType>productType</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="appTypeTransfer" id="0f8e1384-810d-49ee-850e-71e9c68dbea2">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.appType</con:sourcePath>
            <con:targetType>appType</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="ChannelTransfer" id="b7e97b86-1b60-4dd4-b161-a66483bba4c6">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.channelType</con:sourcePath>
            <con:targetType>channel</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="EventTransfer" id="4aee44c7-4166-4af5-8c5e-cc99122cb361">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.eventType</con:sourcePath>
            <con:targetType>eventType</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="localeTransfer" id="ef64ff2f-ed0f-4655-8291-45cd8742c6ff">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.template.locale</con:sourcePath>
            <con:targetType>locale</con:targetType>
            <con:targetStep>GetTemplate_altid</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="GetTemplate_altid" id="a5a11774-b8eb-4769-b1cc-6fda61258f21">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#GetTemplate_altid_End}:{productType},{appType},{eventType},{channel},{locale}" methodName="GetTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="GetTemplate_altid" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request>{
	
	"eventName":"CourseEvent_MB1"
	
}</con:request>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ChannelTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#channelType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.channelType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains channelType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.channelType+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ProductTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.productType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains productType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.productType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="AppTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#appType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.appType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains appType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.appType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="EventTypeAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#eventType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.eventType == expectedValue,'CREATE TEMPLATE FAILED :XPath contains eventType comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.eventType+'] '</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="CreatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.createdAt != null,'CREATE TEMPLATE FAILED :XPath contains createdAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="UpdatedAtAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.updatedAt != null,'CREATE TEMPLATE FAILED :XPath contains UpdatedAt comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="TemplateIdAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.id != null,'CREATE TEMPLATE FAILED :XPath contains id comparison Failed, Field is Blank'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="PayloadMessageAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#message}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.payload.message == expectedValue,'CREATE TEMPLATE FAILED :XPath contains payload.message comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.payload.message+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="ContactNameAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

//def expectedValue = context.expand('${Properties#contactName}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.contactName != null,'UPDATE TEMPLATE FAILED :XPath contains contactName comparison Failed, expecting null'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="GroovyScriptAssertion" id="95431a3f-c7bd-42a8-996a-d87dd0ed2f1a" name="LocaleAssertion">
              <con:configuration>
                <scriptText>import com.eviware.soapui.support.XmlHolder
import groovy.json.*

def expectedValue = context.expand('${Properties#locale}_')+context.expand('${Properties#productType}')
def ResponseTime =messageExchange.getTimeTaken()
log.info(ResponseTime)
//define the location of the JSON file
def ResponseMessage = messageExchange.response.responseContent
//define "json" which will be the name of my variable
def jsonSlurper = new JsonSlurper().parseText (ResponseMessage)

assert jsonSlurper.data.template.locale == expectedValue,'UPDATE TEMPLATE FAILED :XPath contains locale comparison Failed, expecting ['+expectedValue +'] actual ['+ jsonSlurper.data.template.locale+']'</scriptText>
              </con:configuration>
            </con:assertion>
            <con:assertion type="Simple Contains" id="2e2d0d42-4c5a-48f8-b064-4131d4c7e7b3" name="Contains">
              <con:configuration>
                <token>200</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <con:entry key="locale" value="EN-US_Template_regress77745560000000000"/>
              <con:entry key="eventType" value="eventType"/>
              <con:entry key="appType" value="appType"/>
              <con:entry key="channel" value="inbrowser"/>
              <con:entry key="productType" value="Template_regress77745560000000000"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>productType</con:entry>
              <con:entry>appType</con:entry>
              <con:entry>eventType</con:entry>
              <con:entry>channel</con:entry>
              <con:entry>locale</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="transfer" name="TemplateIdTransfer 1" id="091f9665-ff12-4cde-8f63-37827f25bc63">
        <con:settings/>
        <con:config xsi:type="con:PropertyTransfersStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:transfers setNullOnMissingSource="true" transferTextContent="true" failOnError="true" ignoreEmpty="false" transferToAll="false" entitize="false" transferChildNodes="false">
            <con:name>TokenId</con:name>
            <con:sourceType>Response</con:sourceType>
            <con:sourceStep>UpdateTemplate - Request 1</con:sourceStep>
            <con:sourcePath>$.data.id</con:sourcePath>
            <con:targetType>TokenId</con:targetType>
            <con:targetStep>DeleteTemplate - Request 1</con:targetStep>
            <con:type>JSONPATH</con:type>
            <con:upgraded>true</con:upgraded>
          </con:transfers>
        </con:config>
      </con:testStep>
      <con:testStep type="restrequest" name="DeleteTemplate - Request 1" id="71315997-8050-4cc9-8ae6-0e0e0e02f8a7">
        <con:settings/>
        <con:config service="http://172.16.36.46:8080" resourcePath="/${#Project#TemplateEnd}/{TokenId}" methodName="DeleteTemplate" xsi:type="con:RestRequestStep" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
          <con:restRequest name="DeleteTemplate - Request 1" id="6c78cd90-a2b9-4719-8522-3ea612e31394" mediaType="application/json" postQueryString="false">
            <con:settings>
              <con:setting id="com.eviware.soapui.impl.wsdl.WsdlRequest@request-headers">&lt;xml-fragment/></con:setting>
            </con:settings>
            <con:endpoint>${#Project#QURL}</con:endpoint>
            <con:request/>
            <con:originalUri>http://172.16.36.46/event/register</con:originalUri>
            <con:assertion type="Simple Contains" id="3ff14e58-36ff-44a9-94b1-0d57c3d08b81" name="StatusAssertion">
              <con:configuration>
                <token>204</token>
                <ignoreCase>false</ignoreCase>
                <useRegEx>false</useRegEx>
              </con:configuration>
            </con:assertion>
            <con:credentials>
              <con:authType>No Authorization</con:authType>
            </con:credentials>
            <con:jmsConfig JMSDeliveryMode="PERSISTENT"/>
            <con:jmsPropertyConfig/>
            <con:parameters>
              <entry key="TokenId" value="6115bf10-b30b-40e7-96bf-dd1cad709f50" xmlns="http://eviware.com/soapui/config"/>
            </con:parameters>
            <con:parameterOrder>
              <con:entry>TokenId</con:entry>
            </con:parameterOrder>
          </con:restRequest>
        </con:config>
      </con:testStep>
      <con:testStep type="groovy" name="Loop" id="4d19fabb-1cfd-4ad9-81b1-2fd1b2442179" disabled="true">
        <con:settings/>
        <con:config>
          <script>def myTestCase = context.testCase
 
def runner
propTestStep = myTestCase.getTestStepByName("Properties") // get the Property TestStep
endLoop = propTestStep.getPropertyValue("StopLoop").toString()
 
if (endLoop.toString() == "T" || endLoop.toString()=="True" || endLoop.toString()=="true")
{
 log.info ("Exit Groovy Data Source Looper")
 assert true
}
else
{
 testRunner.gotoStepByName("ReadExcel")
}</script>
        </con:config>
      </con:testStep>
      <con:tearDownScript>testRunner.testCase.testSteps.each{ name,props ->
    log.info "Test step name: $name"
    // check that the testStep class support assertions 
    // (for example groovy testStep doesn't)
    if(props.metaClass.respondsTo(props, "getAssertionList")){
        // get assertionList
        props.getAssertionList().each{
           log.info "$it.label - $it.status"
        }
    }
}</con:tearDownScript>
      <con:properties/>
    </con:testCase>
    <con:properties/>
    <con:setupScript>import com.globallogic.soapui.CreateReport;

def groovyUtils = new com.eviware.soapui.support.GroovyUtils(context)
def date = new Date() 
def dts = date.format("yyyy-MM-dd-HH-mm-ss") 
def projectDir = groovyUtils.projectPath
def reportPath = projectDir +'\\'+'report\\NotificationSystem_IndividualTemplates_inbrowser_'+dts+'.html'
//def reportPath = projectDir +'\\'+'report\\NotificationSystem_IndividualTemplates.html'
def reportConfigPath = projectDir +'\\'+'extent-config.xml'
log.info "reportPath - " + reportPath

CreateReport.setupReport(testSuite, reportPath, reportConfigPath)</con:setupScript>
    <con:tearDownScript>import com.globallogic.soapui.CreateReport;
CreateReport.closeReport(testSuite);</con:tearDownScript>
  </con:testSuite>
  <con:properties>
    <con:property>
      <con:name>eventJSON</con:name>
      <con:value>Adding data for load</con:value>
    </con:property>
    <con:property>
      <con:name>PNSURL</con:name>
      <con:value>http://tst-piapi-internal.dev-openclass.com</con:value>
    </con:property>
    <con:property>
      <con:name>notificationTurnOnEnd</con:name>
      <con:value>/ns/v1/notifications/turnOn</con:value>
    </con:property>
    <con:property>
      <con:name>QURL</con:name>
      <con:value>http://consul-qa.gl-poc.com</con:value>
    </con:property>
    <con:property>
      <con:name>TemplateEnd</con:name>
      <con:value>/ns/v1/templates</con:value>
    </con:property>
    <con:property>
      <con:name>NS_Workbook_Path</con:name>
      <con:value>DataSheet\ESES.xlsx</con:value>
    </con:property>
    <con:property>
      <con:name>NS_Template_Sheet</con:name>
      <con:value>NS_Individual_Templates</con:value>
    </con:property>
    <con:property>
      <con:name>ClaimTokenEnd</con:name>
      <con:value>/iam/v1/tokens?action=claim</con:value>
    </con:property>
    <con:property>
      <con:name>GetTemplate_altid_End</con:name>
      <con:value>/ns/v1/templates/altid</con:value>
    </con:property>
    <con:property>
      <con:name>generateTokenEnd</con:name>
      <con:value>/tokens</con:value>
    </con:property>
    <con:property>
      <con:name>UserLoginEnd</con:name>
      <con:value>/iam/v1/login</con:value>
    </con:property>
    <con:property>
      <con:name>UserTokenValidationEnd</con:name>
      <con:value>/iam/v1/tokens?action=validate</con:value>
    </con:property>
    <con:property>
      <con:name>UserLogoutEnd</con:name>
      <con:value>/iam/v1/logout</con:value>
    </con:property>
    <con:property>
      <con:name>UserLogout</con:name>
      <con:value>/iam/v1/logout</con:value>
    </con:property>
    <con:property>
      <con:name>NS_Templates_email_Sheet</con:name>
      <con:value>NS_Individual_Templates_email</con:value>
    </con:property>
    <con:property>
      <con:name>UserLoginAuth2.0End</con:name>
      <con:value>/iam/v1/oauth2/login</con:value>
    </con:property>
    <con:property>
      <con:name>UserTokenValidationAuth2.0End</con:name>
      <con:value>/iam/v1/oauth2/validate</con:value>
    </con:property>
    <con:property>
      <con:name>UserLogoutAuth2.0End</con:name>
      <con:value>/iam/v1/oauth2/logout</con:value>
    </con:property>
    <con:property>
      <con:name>SessionTimeout_Sheet</con:name>
      <con:value>SessionTimeout</con:value>
    </con:property>
    <con:property>
      <con:name>UserAuth2.0ClaimTokenEnd</con:name>
      <con:value>/iam/v1/oauth2/tokeninfo</con:value>
    </con:property>
  </con:properties>
  <con:wssContainer/>
  <con:oAuth2ProfileContainer/>
  <con:oAuth1ProfileContainer/>
  <con:sensitiveInformation/>
</con:soapui-project>